
===== FILE: src/App.jsx =====

// src/App.jsx
import { HashRouter } from 'react-router-dom';
import AppRoutes from './router';

function App() {
  return (
    <HashRouter>
      <AppRoutes />
    </HashRouter>
  );
}

export default App;


===== FILE: src/components/atoms/Avatar.jsx =====

// src/components/atoms/Avatar.jsx
import React from "react";
import clsx from "clsx";

/**
 * Avatar atom
 * Props:
 * - src: image url
 * - alt: alt text (for accessibility)
 * - size: 'sm' | 'md' | 'lg' | 'xl' | number (px)
 * - fallback: string (e.g. "AB" or placeholder SVG)
 * - status: 'online' | 'offline' | null (optional status dot)
 * - className: extra Tailwind classes
 */
const sizeMap = {
  sm: "w-8 h-8 text-sm",
  md: "w-11 h-11 text-base",
  lg: "w-16 h-16 text-xl",
  xl: "w-24 h-24 text-2xl",
};

export default function Avatar({
  src,
  alt = "",
  size = "md",
  fallback = "",
  status = null,
  className = "",
  ...rest
}) {
  const sizeClass = typeof size === "number"
    ? `w-[${size}px] h-[${size}px]`
    : sizeMap[size] || sizeMap.md;

  return (
    <span className={clsx("relative inline-block", sizeClass, className)} {...rest}>
      {src ? (
        <img
          src={src}
          alt={alt}
          className="w-full h-full object-cover rounded-full border border-divider bg-background-soft"
          loading="lazy"
        />
      ) : fallback ? (
        <span className="w-full h-full flex items-center justify-center rounded-full bg-background-soft text-text-secondary font-medium uppercase border border-divider">
          {typeof fallback === "string" ? fallback.slice(0, 2) : fallback}
        </span>
      ) : (
        // Default placeholder icon (can be replaced with your own SVG)
        <span className="w-full h-full flex items-center justify-center rounded-full bg-background-soft border border-divider text-text-secondary">
          <svg width="60%" height="60%" viewBox="0 0 24 24" fill="none">
            <circle cx="12" cy="8" r="4" stroke="currentColor" strokeWidth="1.5"/>
            <path d="M4 20c0-2.5 3-4.5 8-4.5s8 2 8 4.5" stroke="currentColor" strokeWidth="1.5"/>
          </svg>
        </span>
      )}

      {status && (
        <span
          className={clsx(
            "absolute right-0 bottom-0 block w-2.5 h-2.5 rounded-full ring-2 ring-white",
            status === "online" ? "bg-accent" : "bg-gray-400"
          )}
          aria-label={status === "online" ? "Online" : "Offline"}
        />
      )}
    </span>
  );
}


===== FILE: src/components/atoms/Badge.jsx =====

// src/components/atoms/Badge.jsx
import React from "react";
import clsx from "clsx";

/**
 * Badge atom
 * Props:
 * - children: text or node (label)
 * - intent: 'success' | 'warning' | 'error' | 'info' | 'neutral' | custom (controls color)
 * - size: 'sm' | 'md'
 * - pill: boolean (full-rounded)
 * - icon: ReactNode (optional)
 * - className: extra Tailwind classes
 * - ...rest: extra props (aria-label, etc)
 */
const intentMap = {
  success: "bg-accent/20 text-accent",
  warning: "bg-warning/20 text-warning",
  error:   "bg-error/20 text-error",
  info:    "bg-primary/10 text-primary",
  neutral: "bg-background-soft text-text-secondary",
};

const sizeMap = {
  sm: "px-2 py-0.5 text-xs",
  md: "px-3 py-1 text-sm",
};

export default function Badge({
  children,
  intent = "neutral",
  size = "sm",
  pill = false,
  icon,
  className = "",
  ...rest
}) {
  return (
    <span
      className={clsx(
        "inline-flex items-center font-medium",
        intentMap[intent] || intentMap.neutral,
        sizeMap[size],
        pill ? "rounded-full" : "rounded-md",
        className
      )}
      aria-label={rest["aria-label"] || typeof children === "string" ? children : ""}
      {...rest}
    >
      {icon && <span className="mr-1">{icon}</span>}
      {children}
    </span>
  );
}


===== FILE: src/components/atoms/Button.jsx =====

// src/components/atoms/Button.jsx
import React from "react";
import clsx from "clsx";

// Loader spinner atom (minimal, atomic)
function Spinner({ className }) {
  return (
    <svg
      className={clsx("animate-spin h-5 w-5 text-white", className)}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <circle
        className="opacity-25"
        cx="12" cy="12" r="10"
        stroke="currentColor" strokeWidth="4"
      />
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
      />
    </svg>
  );
}

/**
 * PRO Button atom
 * Props:
 * - children: text
 * - type: 'button' | 'submit'
 * - variant: 'primary' | 'secondary' | 'ghost'
 * - size: 'md' | 'lg' | 'sm'
 * - fullWidth: boolean
 * - disabled: boolean
 * - loading: boolean
 * - leftIcon/rightIcon: <Icon />
 * - className: string (extra classes)
 * - ...rest: native button props
 */
export default function Button({
  children,
  type = "button",
  variant = "primary",
  size = "md",
  fullWidth = false,
  disabled = false,
  loading = false,
  leftIcon,
  rightIcon,
  className = "",
  ...rest
}) {
  // Style maps
  const base = "inline-flex items-center justify-center font-semibold transition focus:outline-none focus-visible:ring-2 focus-visible:ring-primary shadow-card";
  const sizes = {
    sm: "h-9 px-3 text-sm rounded-md",
    md: "h-11 px-4 text-base rounded-lg",
    lg: "h-14 px-6 text-lg rounded-xl",
  };
  const variants = {
    primary: "bg-primary text-white hover:bg-primary-dark active:bg-primary-dark disabled:bg-text-disabled disabled:text-white",
    secondary: "bg-white text-primary border border-primary hover:bg-primary/10 active:bg-primary/20 disabled:text-text-disabled disabled:border-gray-200",
    ghost: "bg-transparent text-primary hover:bg-primary/10 active:bg-primary/20 disabled:text-text-disabled",
  };

  return (
    <button
      type={type}
      className={clsx(
        base,
        sizes[size],
        variants[variant],
        { "w-full": fullWidth, "opacity-60 cursor-not-allowed": disabled || loading },
        className
      )}
      disabled={disabled || loading}
      {...rest}
    >
      {loading && <Spinner className="mr-2" />}
      {leftIcon && !loading && <span className="mr-2">{leftIcon}</span>}
      {children}
      {rightIcon && !loading && <span className="ml-2">{rightIcon}</span>}
    </button>
  );
}


===== FILE: src/components/atoms/Icon.jsx =====

// src/components/atoms/Icon.jsx
import React from "react";
import clsx from "clsx";

/**
 * Icon atom for SVG-based icons.
 * Props:
 * - name: (optional) string — load icon by name from assets/icons (if using dynamic import)
 * - size: number|string (default: 20)
 * - className: extra Tailwind classes
 * - children: SVG element (for inline SVG)
 * - ...rest: extra props (aria-label, etc)
 *
 * Usage:
 * <Icon><YourSVGIcon /></Icon>
 * <Icon name="home" />
 */
export default function Icon({
  name,
  size = 20,
  className = "",
  children,
  ...rest
}) {
  // Static import map for known icons (expand as needed)
  const iconMap = {
    home: (
      <svg viewBox="0 0 20 20" fill="none" width={size} height={size}>
        <path d="M3 9.5L10 4l7 5.5V16a1 1 0 01-1 1h-3a1 1 0 01-1-1V13a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1V9.5z" stroke="currentColor" strokeWidth={1.5} />
      </svg>
    ),
    search: (
      <svg fill="none" viewBox="0 0 20 20" width={size} height={size}>
        <circle cx={9} cy={9} r={7} stroke="currentColor" strokeWidth={1.5}/>
        <path d="M15 15l4 4" stroke="currentColor" strokeWidth={1.5} strokeLinecap="round"/>
      </svg>
    ),
    // Add more icons as needed...
  };

  // Prefer passed children (inline SVG), fallback to iconMap by name
  const content = children
    ? React.cloneElement(children, {
        width: size,
        height: size,
        className: clsx("inline-block", children.props.className),
        ...rest,
      })
    : name && iconMap[name]
    ? React.cloneElement(iconMap[name], {
        width: size,
        height: size,
        className: clsx("inline-block", className),
        ...rest,
      })
    : null;

  return (
    <span
      className={clsx(
        "icon",
        className
      )}
      role="img"
      aria-label={rest["aria-label"] || name}
      {...rest}
    >
      {content}
    </span>
  );
}


===== FILE: src/components/atoms/Input.jsx =====

// src/components/atoms/Input.jsx
import React, { useState } from "react";
import clsx from "clsx";

/**
 * PRO Input atom
 * Props:
 * - type: string (text, number, password, etc.)
 * - placeholder: string
 * - value, onChange: controlled input
 * - disabled: boolean
 * - error: string (error message)
 * - success: string (success message)
 * - leftIcon, rightIcon: <Icon />
 * - className: string
 * - ...rest: native input props
 */
export default function Input({
  type = "text",
  placeholder,
  value,
  onChange,
  disabled = false,
  error = "",
  success = "",
  leftIcon,
  rightIcon,
  className = "",
  ...rest
}) {
  const [showPassword, setShowPassword] = useState(false);

  // If type=password, allow toggle
  const actualType = type === "password" && showPassword ? "text" : type;

  return (
    <div>
      <div
        className={clsx(
          "flex items-center border rounded-lg px-3 bg-white transition h-11",
          error
            ? "border-error focus-within:border-error"
            : "border-divider focus-within:border-primary",
          disabled && "bg-background-soft text-text-disabled opacity-60 cursor-not-allowed",
          className
        )}
      >
        {leftIcon && <span className="mr-2 text-xl text-text-secondary">{leftIcon}</span>}

        <input
          type={actualType}
          placeholder={placeholder}
          value={value}
          onChange={onChange}
          disabled={disabled}
          className={clsx(
            "flex-1 bg-transparent border-none outline-none text-base placeholder-text-secondary",
            "focus:ring-0 disabled:cursor-not-allowed",
            leftIcon && "pl-0",
            rightIcon && type !== "password" && "pr-0"
          )}
          {...rest}
        />

        {/* Password reveal for type=password */}
        {type === "password" && (
          <button
            type="button"
            tabIndex={-1}
            onClick={() => setShowPassword((s) => !s)}
            className="ml-2 text-text-secondary focus:outline-none"
            disabled={disabled}
          >
            {showPassword ? (
              // You can replace these with your own SVG icons
              <svg width="20" height="20" fill="none" viewBox="0 0 20 20">
                <path d="M10 13.333a3.333 3.333 0 100-6.666 3.333 3.333 0 000 6.666z" stroke="currentColor"/>
                <path d="M1.667 10S4.167 4.167 10 4.167c5.833 0 8.333 5.833 8.333 5.833s-2.5 5.833-8.333 5.833c-5.833 0-8.333-5.833-8.333-5.833z" stroke="currentColor"/>
              </svg>
            ) : (
              <svg width="20" height="20" fill="none" viewBox="0 0 20 20">
                <path d="M1.667 1.667l16.666 16.666" stroke="currentColor"/>
                <path d="M10 13.333a3.333 3.333 0 01-3.072-2.128M7.186 7.186A3.333 3.333 0 0112.814 12.814M17.04 13.873C16.07 15.17 13.578 17.5 10 17.5c-5.833 0-8.333-5.833-8.333-5.833A15.772 15.772 0 014.17 6.165" stroke="currentColor"/>
              </svg>
            )}
          </button>
        )}

        {/* Optional right icon (for search, clear, etc) */}
        {rightIcon && type !== "password" && (
          <span className="ml-2 text-xl text-text-secondary">{rightIcon}</span>
        )}
      </div>
      {error && (
        <div className="text-error text-xs mt-1">{error}</div>
      )}
      {!error && success && (
        <div className="text-success text-xs mt-1">{success}</div>
      )}
    </div>
  );
}


===== FILE: src/components/atoms/Loader.jsx =====

// src/components/atoms/Loader.jsx
import React from "react";
import clsx from "clsx";

/**
 * Spinner loader atom
 * Props:
 * - size: number (px, default 24)
 * - color: Tailwind class ("text-primary", "text-white", etc.)
 * - className: extra classes
 */
export function Spinner({ size = 24, color = "text-primary", className = "", ...rest }) {
  return (
    <svg
      width={size}
      height={size}
      className={clsx("animate-spin", color, className)}
      viewBox="0 0 24 24"
      aria-label="Loading"
      {...rest}
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
        fill="none"
      />
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
      />
    </svg>
  );
}

/**
 * Skeleton loader atom (for cards, lists, etc.)
 * Props:
 * - width, height: size in px (default w-full h-4)
 * - rounded: boolean (default true)
 * - className: extra classes
 * Usage:
 * <Skeleton width={200} height={40} />
 */
export function Skeleton({
  width,
  height,
  rounded = true,
  className = "",
  ...rest
}) {
  return (
    <div
      className={clsx(
        "bg-divider/40 animate-pulse",
        rounded ? "rounded-lg" : "",
        className
      )}
      style={{
        width: width ? (typeof width === "number" ? `${width}px` : width) : undefined,
        height: height ? (typeof height === "number" ? `${height}px` : height) : undefined,
      }}
      aria-label="Loading"
      {...rest}
    />
  );
}


===== FILE: src/components/atoms/Typography.jsx =====

// src/components/atoms/Typography.jsx
import React from "react";
import clsx from "clsx";

/**
 * Heading atom
 * Props:
 * - level: 1 | 2 | 3 | 4 (renders h1-h4)
 * - children: node
 * - className: string
 * - ...rest: extra props
 */
export function Heading({ level = 1, children, className = "", ...rest }) {
  const Tag = `h${level}`;
  const styles = {
    1: "text-2xl font-bold text-text-primary md:text-3xl",
    2: "text-xl font-semibold text-text-primary md:text-2xl",
    3: "text-lg font-semibold text-text-primary md:text-xl",
    4: "text-base font-medium text-text-primary md:text-lg",
  };
  return (
    <Tag className={clsx(styles[level] || styles[1], className)} {...rest}>
      {children}
    </Tag>
  );
}

/**
 * BodyText atom
 * Props:
 * - size: "sm" | "md" | "lg"
 * - color: "primary" | "secondary" | "error" | "success" | "muted"
 * - as: elementType (e.g., 'p', 'span', 'div')
 * - className: string
 * - ...rest
 */
export function BodyText({
  size = "md",
  color = "primary",
  as = "p",
  className = "",
  children,
  ...rest
}) {
  const Tag = as;
  const sizeMap = {
    sm: "text-xs md:text-sm",
    md: "text-base",
    lg: "text-lg md:text-xl",
  };
  const colorMap = {
    primary: "text-text-primary",
    secondary: "text-text-secondary",
    error: "text-error",
    success: "text-success",
    muted: "text-text-secondary opacity-80",
  };
  return (
    <Tag className={clsx(sizeMap[size], colorMap[color], className)} {...rest}>
      {children}
    </Tag>
  );
}

/**
 * Caption atom
 * For extra small helper or status text
 */
export function Caption({ children, className = "", ...rest }) {
  return (
    <span className={clsx("text-xs text-text-secondary", className)} {...rest}>
      {children}
    </span>
  );
}


===== FILE: src/components/layout/MobileLayout.jsx =====

// File: src/components/layout/MobileLayout.jsx
import React from 'react';

export default function MobileLayout({ children }) {
  return (
    <div className="
        min-h-screen           /* full viewport height */
        bg-background          /* your default background color */
        flex                   /* flex container */
        justify-center         /* center horizontally */
        items-center           /* center vertically */
      ">
      <div className="w-full max-w-md h-full">
        {children}
      </div>
    </div>
  );
}


===== FILE: src/components/layout/ScreenContainer.jsx =====

// File: src/components/layout/ScreenContainer.jsx
import React from 'react';
import clsx from 'clsx';

export default function ScreenContainer({
  children,
  className = '',
  ...rest
}) {
  return (
    <div
      className={clsx('px-4 py-2', className)}
      {...rest}
    >
      {children}
    </div>
  );
}


===== FILE: src/components/molecules/Card.jsx =====

// src/components/molecules/Card.jsx
import React from "react";
import clsx from "clsx";

/**
 * Card molecule
 * Props:
 * - children: content
 * - variant: "default" | "outlined" | "soft" | "error" | "success"
 * - padding: "sm" | "md" | "lg" | false (no padding)
 * - clickable: boolean (adds hover, pointer)
 * - className: extra Tailwind classes
 * - ...rest
 */
const variantMap = {
  default: "bg-background-soft shadow-card",
  outlined: "bg-white border border-divider",
  soft: "bg-primary/5",
  error: "bg-error/10 border border-error",
  success: "bg-accent/10 border border-accent",
};

const paddingMap = {
  sm: "p-3",
  md: "p-5",
  lg: "p-7",
  false: "",
};

export default function Card({
  children,
  variant = "default",
  padding = "md",
  clickable = false,
  className = "",
  ...rest
}) {
  return (
    <div
      className={clsx(
        "rounded-lg transition group",
        variantMap[variant] || variantMap.default,
        paddingMap[padding],
        clickable && "hover:shadow-elevated cursor-pointer active:scale-[0.98]",
        className
      )}
      tabIndex={clickable ? 0 : undefined}
      {...rest}
    >
      {children}
    </div>
  );
}


===== FILE: src/components/molecules/CategoryCard.jsx =====

// src/components/molecules/CategoryCard.jsx
import React from "react";
import clsx from "clsx";
import Card from "./Card";

/**
 * CategoryCard molecule
 * Props:
 * - icon: ReactNode (SVG icon/image)
 * - label: string
 * - active: boolean (selected/highlighted)
 * - disabled: boolean
 * - onClick: function (optional, makes it clickable)
 * - className: string
 */
export default function CategoryCard({
  icon,
  label,
  active = false,
  disabled = false,
  onClick,
  className = "",
  ...rest
}) {
  return (
    <Card
      variant={active ? "soft" : "default"}
      padding="sm"
      clickable={!!onClick && !disabled}
      className={clsx(
        "flex flex-col items-center w-20 h-24 transition relative",
        active ? "ring-2 ring-primary ring-inset" : "",
        disabled ? "opacity-50 pointer-events-none" : "hover:-translate-y-1",
        className
      )}
      onClick={onClick}
      tabIndex={disabled ? -1 : 0}
      aria-pressed={active}
      {...rest}
    >
      <span
        className={clsx(
          "flex items-center justify-center w-12 h-12 rounded-full bg-primary/10 mb-2",
          active ? "bg-primary/20" : ""
        )}
      >
        {icon}
      </span>
      <span className="text-xs font-medium text-center text-text-primary truncate">
        {label}
      </span>
      {/* Optionally add badge or "new" label at top right */}
      {/* <Badge intent="info" className="absolute top-2 right-2">NEW</Badge> */}
    </Card>
  );
}


===== FILE: src/components/molecules/FeaturedShopCard.jsx =====

// src/components/molecules/FeaturedShopCard.jsx
import React from "react";
import clsx from "clsx";
import Card from "./Card";
import Avatar from "../atoms/Avatar";
import Badge from "../atoms/Badge";

/**
 * FeaturedShopCard molecule
 * Props:
 * - image: url (shop logo or photo)
 * - name: string (shop name)
 * - category: string (e.g. "Groceries")
 * - status: "open" | "closed"
 * - onClick: function (for navigation)
 * - badge: string (e.g. "Featured", optional)
 * - className: extra classes
 */
export default function FeaturedShopCard({
  image,
  name,
  category,
  status = "open",
  badge,
  onClick,
  className = "",
  ...rest
}) {
  return (
    <Card
      variant="outlined"
      padding="sm"
      clickable={!!onClick}
      className={clsx(
        "flex flex-col items-center w-40 min-w-[160px] max-w-[180px] transition relative group",
        "hover:shadow-elevated hover:-translate-y-1 active:scale-[0.98]",
        className
      )}
      onClick={onClick}
      {...rest}
    >
      {/* Shop avatar or photo */}
      <Avatar
        src={image}
        alt={name}
        size="lg"
        className="mb-2"
      />

      {/* Badge for “Featured” */}
      {badge && (
        <Badge intent="info" pill className="absolute top-2 left-2 z-10">
          {badge}
        </Badge>
      )}

      {/* Shop name */}
      <div className="text-sm font-semibold text-text-primary text-center truncate w-full">
        {name}
      </div>
      {/* Category */}
      <div className="text-xs text-text-secondary mt-1 mb-2 text-center truncate w-full">
        {category}
      </div>

      {/* Shop status */}
      <Badge
        intent={status === "open" ? "success" : "error"}
        size="sm"
        pill
        className="mt-auto"
      >
        {status === "open" ? "Open" : "Closed"}
      </Badge>
    </Card>
  );
}


===== FILE: src/components/molecules/NearbyShopCard.jsx =====

// src/components/molecules/NearbyShopCard.jsx
import React from "react";
import clsx from "clsx";
import Card from "./Card";
import Avatar from "../atoms/Avatar";
import Badge from "../atoms/Badge";

/**
 * NearbyShopCard molecule
 * Props:
 * - image: url (shop logo or photo)
 * - name: string (shop name)
 * - category: string (e.g. "Pharmacy")
 * - address: string (optional)
 * - status: "open" | "closed"
 * - delivers: boolean (shows “Delivers” badge)
 * - distance: string/number (e.g. "400m", optional)
 * - onClick: function (for navigation)
 * - className: extra classes
 */
export default function NearbyShopCard({
  image,
  name,
  category,
  address,
  status = "open",
  delivers = false,
  distance,
  onClick,
  className = "",
  ...rest
}) {
  return (
    <Card
      variant="outlined"
      padding="md"
      clickable={!!onClick}
      className={clsx(
        "flex items-center gap-4 transition group min-h-[76px]",
        "hover:shadow-elevated hover:-translate-y-0.5 active:scale-[0.99]",
        className
      )}
      onClick={onClick}
      {...rest}
    >
      {/* Shop avatar or photo */}
      <Avatar src={image} alt={name} size="md" />

      <div className="flex-1 min-w-0">
        {/* Shop name and “Delivers” badge */}
        <div className="flex items-center gap-1">
          <span className="text-base font-semibold text-text-primary truncate">
            {name}
          </span>
          {delivers && (
            <Badge intent="success" size="sm" pill className="ml-2">
              Delivers
            </Badge>
          )}
        </div>
        {/* Category + Address */}
        <div className="flex flex-wrap items-center gap-2 mt-0.5 text-xs text-text-secondary">
          <span className="truncate">{category}</span>
          {address && (
            <>
              <span className="mx-1">•</span>
              <span className="truncate">{address}</span>
            </>
          )}
        </div>
        {/* Optional distance */}
        {distance && (
          <div className="text-xs text-text-secondary mt-0.5">
            {distance}
          </div>
        )}
      </div>

      {/* Status badge (Open/Closed) */}
      <Badge
        intent={status === "open" ? "success" : "error"}
        size="sm"
        pill
        className="ml-2 shrink-0"
      >
        {status === "open" ? "Open" : "Closed"}
      </Badge>
    </Card>
  );
}


===== FILE: src/components/molecules/PageHeader.jsx =====

// src/components/molecules/PageHeader.jsx
import React from "react";
import clsx from "clsx";
import Icon from "../atoms/Icon";
import { Heading, BodyText } from "../atoms/Typography";

/**
 * PageHeader molecule
 * Props:
 * - title: string or node
 * - subtitle: string or node (optional)
 * - back: function (if provided, shows back arrow)
 * - action: node (right-side button/icon/avatar)
 * - sticky: boolean (makes header sticky at top)
 * - className: string
 * - ...rest
 */
export default function PageHeader({
  title,
  subtitle,
  back,
  action,
  sticky = true,
  className = "",
  ...rest
}) {
  return (
    <header
      className={clsx(
        "w-full z-20 bg-background",
        sticky && "sticky top-0",
        "flex items-center min-h-[56px] px-4 md:px-8 py-2 border-b border-divider",
        className
      )}
      {...rest}
    >
      {/* Back button */}
      {back && (
        <button
          type="button"
          aria-label="Back"
          onClick={back}
          className="mr-3 flex items-center justify-center rounded-full w-9 h-9 hover:bg-background-soft focus:outline-none"
        >
          <Icon name="chevron-left" size={22} className="text-text-primary" />
        </button>
      )}

      {/* Title and subtitle */}
      <div className={clsx(
        "flex-1 min-w-0",
        (subtitle || action) && "flex flex-col"
      )}>
        <Heading level={2} className="truncate">{title}</Heading>
        {subtitle && (
          <BodyText size="sm" color="secondary" className="truncate mt-0.5">
            {subtitle}
          </BodyText>
        )}
      </div>

      {/* Action (icon, button, avatar, etc.) */}
      {action && (
        <div className="ml-3 flex-shrink-0">{action}</div>
      )}
    </header>
  );
}


===== FILE: src/components/molecules/SearchBar.jsx =====

// src/components/molecules/SearchBar.jsx
import React, { useState, useRef } from "react";
import clsx from "clsx";
import Input from "../atoms/Input";
import Icon from "../atoms/Icon";
import { Spinner } from "../atoms/Loader";

/**
 * SearchBar molecule
 * Props:
 * - value: string (for controlled input)
 * - onChange: function (value) — fires on typing
 * - onSearch: function (value) — fires on Enter/search
 * - placeholder: string
 * - loading: boolean (shows spinner)
 * - disabled: boolean
 * - className: string
 */
export default function SearchBar({
  value,
  onChange,
  onSearch,
  placeholder = "Search...",
  loading = false,
  disabled = false,
  className = "",
  ...rest
}) {
  const [internalValue, setInternalValue] = useState("");
  const inputRef = useRef();

  // Controlled vs uncontrolled
  const inputValue = value !== undefined ? value : internalValue;

  function handleInputChange(e) {
    setInternalValue(e.target.value);
    onChange?.(e.target.value);
  }

  function handleKeyDown(e) {
    if (e.key === "Enter") {
      onSearch?.(inputValue);
    }
  }

  function handleClear() {
    setInternalValue("");
    onChange?.("");
    inputRef.current?.focus();
  }

  return (
    <div className={clsx("relative flex items-center w-full", className)}>
      <Input
        ref={inputRef}
        type="text"
        placeholder={placeholder}
        value={inputValue}
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        disabled={disabled || loading}
        leftIcon={<Icon name="search" className="text-text-secondary" />}
        className="pr-10"
        {...rest}
      />
      {/* Clear/Spinner Button */}
      <div className="absolute right-3 top-1/2 -translate-y-1/2 flex items-center">
        {loading ? (
          <Spinner size={20} color="text-primary" />
        ) : inputValue && !disabled ? (
          <button
            type="button"
            aria-label="Clear search"
            onClick={handleClear}
            className="text-xl text-text-secondary focus:outline-none"
            tabIndex={0}
          >
            <Icon>
              <svg viewBox="0 0 20 20" width={20} height={20} fill="none">
                <circle cx={10} cy={10} r={9} stroke="currentColor" strokeWidth={1.5} />
                <path d="M7 7l6 6M13 7l-6 6" stroke="currentColor" strokeWidth={1.5} strokeLinecap="round"/>
              </svg>
            </Icon>
          </button>
        ) : null}
      </div>
    </div>
  );
}


===== FILE: src/components/molecules/SectionCard.jsx =====

// src/components/molecules/SectionCard.jsx
import React from "react";
import clsx from "clsx";
import Card from "./Card";
import { Heading, BodyText } from "../atoms/Typography";

/**
 * SectionCard molecule
 * Props:
 * - title: string or node (section title)
 * - subtitle: string or node (optional subtext)
 * - action: node (optional action button/icon)
 * - children: section content
 * - variant: Card variant (default, outlined, soft, error, etc.)
 * - padding: Card padding ("sm", "md", "lg", or false)
 * - className: extra classes
 * - ...rest
 */
export default function SectionCard({
  title,
  subtitle,
  action,
  children,
  variant = "default",
  padding = "md",
  className = "",
  ...rest
}) {
  return (
    <Card
      variant={variant}
      padding={padding}
      className={clsx("w-full", className)}
      {...rest}
    >
      {(title || subtitle || action) && (
        <div className="flex items-start justify-between mb-3 gap-2">
          <div>
            {title && (
              <Heading level={3} className="mb-0.5 leading-tight">
                {title}
              </Heading>
            )}
            {subtitle && (
              <BodyText size="sm" color="secondary">
                {subtitle}
              </BodyText>
            )}
          </div>
          {action && (
            <div className="shrink-0">{action}</div>
          )}
        </div>
      )}
      <div>{children}</div>
    </Card>
  );
}


===== FILE: src/components/molecules/WalletCard.jsx =====

// src/components/molecules/WalletCard.jsx
import React from "react";
import clsx from "clsx";
import Card from "./Card";
import Icon from "../atoms/Icon";

/**
 * WalletCard molecule
 * Props:
 * - amount: string/number (main balance/value)
 * - label: string (e.g. "Wallet Balance")
 * - icon: ReactNode (optional, left side or top)
 * - color: 'primary' | 'accent' | 'gradient' | custom (bg color)
 * - info: string (optional extra info, e.g. "Expiring soon")
 * - cta: string (call to action, e.g. "Add Money")
 * - onCta: function (on click CTA)
 * - className: extra classes
 */
export default function WalletCard({
  amount,
  label,
  icon,
  color = "primary",
  info,
  cta,
  onCta,
  className = "",
  ...rest
}) {
  // Color map
  const colorMap = {
    primary: "bg-primary text-white",
    accent: "bg-accent text-white",
    gradient: "bg-gradient-to-tr from-primary to-accent text-white",
    default: "bg-background-soft text-text-primary",
  };
  return (
    <Card
      variant="default"
      padding="lg"
      className={clsx(
        "flex items-center gap-4 min-h-[88px] relative overflow-hidden",
        colorMap[color] || colorMap.default,
        className
      )}
      {...rest}
    >
      {/* Optional icon (wallet/cashback) */}
      {icon && (
        <span className="w-10 h-10 flex items-center justify-center bg-white/20 rounded-full mr-2">
          {icon}
        </span>
      )}
      <div className="flex-1 min-w-0">
        {/* Label and amount */}
        <div className="text-xs opacity-90">{label}</div>
        <div className="text-2xl font-bold leading-tight">{amount}</div>
        {info && (
          <div className="text-xs opacity-80 mt-1">{info}</div>
        )}
      </div>
      {/* CTA Button */}
      {cta && (
        <button
          type="button"
          onClick={onCta}
          className="ml-2 px-3 py-1 text-xs font-semibold rounded-full bg-white/80 text-primary shadow hover:bg-white transition"
        >
          {cta}
        </button>
      )}
    </Card>
  );
}


===== FILE: src/components/organisms/BillSummarySection.jsx =====

// File: src/components/organisms/BillSummarySection.jsx
import React from 'react';
import clsx from 'clsx';
import { BodyText } from '../atoms/Typography';
import Button from '../atoms/Button';

/**
 * BillSummarySection organism
 *
 * Props:
 * - title: string                // Optional section title
 * - items: Array<{              // Line-item array
 *     label: string,
 *     amount: number,
 *     isDiscount?: boolean,      // true for discount/savings rows
 *     isFree?: boolean           // true to display 'FREE' (e.g., delivery)
 *   }>
 * - totalLabel: string           // Label for total row (default "Total")
 * - totalAmount: number          // Total amount
 * - currencySymbol: string       // e.g. "₹"
 * - note: string                 // Optional footnote (e.g. "Taxes included")
 * - actionLabel: string          // Optional CTA text (e.g. "Pay Now")
 * - onAction: () => void         // CTA click handler
 * - className: string
 */
export default function BillSummarySection({
  title,
  items = [],
  totalLabel = 'Total',
  totalAmount,
  currencySymbol = '₹',
  note,
  actionLabel,
  onAction,
  className = '',
}) {
  return (
    <section
      className={clsx(
        'bg-[var(--background-soft)] border border-[var(--divider)] rounded-lg p-4',
        className
      )}
      aria-label={title || 'Bill Summary'}
    >
      {title && (
        <h3 className="text-lg font-semibold mb-4">
          {title}
        </h3>
      )}

      <div className="space-y-2">
        {items.map(({ label, amount, isDiscount, isFree }, idx) => {
          let display;
          let valueClass = 'text-sm';
          if (isFree) {
            display = 'FREE';
            valueClass += ' text-[var(--success-color)] font-medium';
          } else if (isDiscount) {
            display = `- ${currencySymbol}${Math.abs(amount)}`;
            valueClass += ' text-[var(--success-color)]';
          } else {
            display = `${currencySymbol}${amount}`;
          }
          return (
            <div key={idx} className="flex justify-between">
              <BodyText size="sm">{label}</BodyText>
              <BodyText size="sm" className={valueClass}>
                {display}
              </BodyText>
            </div>
          );
        })}
      </div>

      <div className="border-t border-[var(--divider)] pt-3 mt-3 flex justify-between">
        <BodyText size="md" className="font-semibold">
          {totalLabel}
        </BodyText>
        <BodyText size="md" className="font-semibold text-[var(--primary-color)]">
          {currencySymbol}{totalAmount}
        </BodyText>
      </div>

      {note && (
        <BodyText size="sm" color="secondary" className="mt-2">
          {note}
        </BodyText>
      )}

      {actionLabel && onAction && (
        <div className="mt-4">
          <Button className="w-full" onClick={onAction}>
            {actionLabel}
          </Button>
        </div>
      )}
    </section>
  );
}


===== FILE: src/components/organisms/BottomNav.jsx =====

// src/components/organisms/BottomNav.jsx
import React from "react";
import clsx from "clsx";
import Icon from "../atoms/Icon";
import Badge from "../atoms/Badge";

// Tab config array makes this scalable!
const TABS = [
  { key: "home", label: "Home", icon: "home", route: "/" },
  { key: "shops", label: "Shops", icon: "store", route: "/shops" },
  { key: "orders", label: "Orders", icon: "clipboard-list", route: "/orders" },
  { key: "cart", label: "Cart", icon: "shopping-cart", route: "/cart", badgeKey: "cartCount" },
  { key: "profile", label: "Profile", icon: "user", route: "/profile" },
];

/**
 * BottomNav organism
 * Props:
 * - active: string (active tab key)
 * - badgeData: object { [badgeKey]: number }
 * - onNavigate: function(tab.route)
 * - className: extra Tailwind classes
 */
export default function BottomNav({
  active = "home",
  badgeData = {},
  onNavigate,
  className = "",
  ...rest
}) {
  return (
    <nav
      className={clsx(
        "fixed bottom-0 left-0 right-0 z-30 bg-background border-t border-divider shadow-card",
        "flex justify-between items-center h-16 px-2 md:hidden",
        "transition-all",
        "safe-bottom",
        className
      )}
      aria-label="Main Navigation"
      {...rest}
    >
      {TABS.map((tab) => (
        <button
          key={tab.key}
          type="button"
          aria-label={tab.label}
          aria-current={active === tab.key ? "page" : undefined}
          className={clsx(
            "flex flex-col items-center justify-center flex-1 h-full outline-none transition",
            active === tab.key
              ? "text-primary font-bold"
              : "text-text-secondary font-medium hover:text-primary"
          )}
          onClick={() => onNavigate?.(tab.route, tab.key)}
        >
          <span className="relative">
            <Icon name={tab.icon} size={24} />
            {/* Badge support (e.g., cart count) */}
            {tab.badgeKey && badgeData[tab.badgeKey] > 0 && (
              <span className="absolute -top-2 -right-2">
                <Badge intent="error" size="sm" pill>
                  {badgeData[tab.badgeKey]}
                </Badge>
              </span>
            )}
          </span>
          <span className="text-xs mt-1 leading-none">{tab.label}</span>
        </button>
      ))}
    </nav>
  );
}


===== FILE: src/components/organisms/CartItemCard.jsx =====

import React from 'react';
import { BodyText, Heading } from '../atoms/Typography';
import Button from '../atoms/Button';

export default function CartItemCard({ item, onRemove, onUpdateQuantity }) {
  return (
    <div className="flex items-center bg-white shadow-sm rounded-lg p-4 gap-4">
      {/* Item Image */}
      <div className="w-20 h-20 bg-gray-200 rounded-md overflow-hidden">
        {item.image_url ? (
          <img src={item.image_url} alt={item.title} className="object-cover w-full h-full" />
        ) : (
          <div className="flex items-center justify-center text-2xl">📦</div>
        )}
      </div>

      {/* Item Details */}
      <div className="flex-1">
        <Heading size="sm" className="text-gray-800">{item.title}</Heading>
        <BodyText className="text-gray-500">
          {item.brand && `${item.brand} • `}
          {item.pack_size} {item.unit}
        </BodyText>
        <div className="flex items-center gap-2 mt-1">
          <Heading size="sm" className="text-primary">₹{item.price}</Heading>
          {item.mrp && item.mrp > item.price && (
            <>
              <span className="text-gray-400 line-through text-sm">₹{item.mrp}</span>
              <span className="text-green-500 text-xs font-medium">
                {Math.round(((item.mrp - item.price) / item.mrp) * 100)}% OFF
              </span>
            </>
          )}
        </div>

        {/* Quantity Controls */}
        <div className="flex items-center gap-2 mt-3">
          <Button size="sm" variant="outline" onClick={() => onUpdateQuantity(item.id, item.quantity - 1)} disabled={item.quantity <= 1}>
            -
          </Button>
          <span className="px-2 font-medium">{item.quantity}</span>
          <Button size="sm" variant="outline" onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}>
            +
          </Button>
        </div>
      </div>

      {/* Remove Button */}
      <button
        className="text-red-500 text-sm"
        onClick={() => onRemove(item.id)}
      >
        Remove
      </button>
    </div>
  );
}


===== FILE: src/components/organisms/EmptyState.jsx =====

// File: src/components/organisms/EmptyState.jsx
import React from 'react';
import clsx from 'clsx';
import Icon from '../atoms/Icon';
import { Heading, BodyText } from '../atoms/Typography';
import Button from '../atoms/Button';

/**
 * EmptyState organism
 *
 * Renders a friendly “nothing here” view for empty lists, errors, or no-data screens.
 *
 * Props:
 * - icon: ReactNode         // Optional icon or SVG to display
 * - title: string           // Primary headline (e.g. “No Shops Found”)
 * - description: string     // Secondary text explaining the empty state
 * - actionLabel: string     // Optional call-to-action button text
 * - onAction: function      // Handler when CTA button is clicked
 * - className: string       // Additional container classes
 */
export default function EmptyState({
  icon,
  title = 'Nothing Here',
  description = '',
  actionLabel,
  onAction,
  className = '',
}) {
  return (
    <div
      className={clsx(
        'flex flex-col items-center justify-center text-center px-6 py-12',
        className
      )}
    >
      {icon && (
        <div className="mb-4 text-primary text-6xl">
          <Icon className="w-12 h-12">{icon}</Icon>
        </div>
      )}
      <Heading level={3} className="mb-2">
        {title}
      </Heading>
      {description && (
        <BodyText size="md" color="secondary" className="mb-6 max-w-xs">
          {description}
        </BodyText>
      )}
      {actionLabel && onAction && (
        <Button onClick={onAction} variant="primary" size="md">
          {actionLabel}
        </Button>
      )}
    </div>
  );
}


===== FILE: src/components/organisms/HeroSection.jsx =====

// src/components/organisms/HeroSection.jsx
import React from "react";
import clsx from "clsx";
import Avatar from "../atoms/Avatar";
import { Heading, BodyText } from "../atoms/Typography";

/**
 * HeroSection organism
 * Props:
 * - greeting: string (e.g. "Hi, Ritika 👋")
 * - subtext: string (e.g. "Discover shops & services in your society")
 * - avatar: image url (user photo, optional)
 * - location: string (e.g. "Lotus Boulevard, Noida", optional)
 * - action: ReactNode (button/search, optional)
 * - className: string
 * - bg: "gradient" | "image" | "primary" (background style)
 * - children: extra content below
 */
export default function HeroSection({
  greeting,
  subtext,
  avatar,
  location,
  action,
  bg = "gradient",
  className = "",
  children,
  ...rest
}) {
  const bgClass = {
    gradient: "bg-gradient-to-br from-primary to-accent",
    primary: "bg-primary",
    image: "bg-[url('/assets/images/hero-bg.svg')] bg-cover bg-center",
  }[bg] || "bg-gradient-to-br from-primary to-accent";

  return (
    <section
      className={clsx(
        "w-full px-4 py-6 md:px-10 rounded-b-2xl relative text-white",
        bgClass,
        className
      )}
      {...rest}
    >
      <div className="flex items-center gap-4 mb-2">
        {avatar && (
          <Avatar src={avatar} size="md" className="ring-2 ring-white" />
        )}
        <div className="flex-1 min-w-0">
          {greeting && (
            <Heading
              level={2}
              className="text-white font-bold text-xl md:text-2xl truncate"
            >
              {greeting}
            </Heading>
          )}
          {location && (
            <BodyText
              size="sm"
              as="div"
              className="flex items-center gap-1 text-white/90"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none"><path d="M12 21s7-7.072 7-11.417A7 7 0 1 0 5 9.583C5 13.928 12 21 12 21z" stroke="currentColor" strokeWidth="1.5"/><circle cx="12" cy="10" r="2" stroke="currentColor" strokeWidth="1.5"/></svg>
              <span className="truncate">{location}</span>
            </BodyText>
          )}
        </div>
      </div>
      {subtext && (
        <BodyText
          size="md"
          as="div"
          className="text-white/90 mb-3"
        >
          {subtext}
        </BodyText>
      )}
      {action && (
        <div className="mt-2">{action}</div>
      )}
      {children}
    </section>
  );
}


===== FILE: src/components/organisms/OrderCard.jsx =====

// src/components/organisms/OrderCard.jsx

import React from "react";

/**
 * OrderCard
 * Props:
 *   order: {
 *     order_id,
 *     shop_name,
 *     shop_type,
 *     status,
 *     total_amount,
 *     created_at,
 *     item_count,
 *     items: [],
 *   }
 *   onClick: () => void  (optional)
 */
const statusConfig = {
  pending:    { label: "Pending",    icon: "⏳", color: "text-yellow-500" },
  accepted:   { label: "Accepted",   icon: "✅", color: "text-blue-500" },
  confirmed:  { label: "Confirmed",  icon: "📦", color: "text-blue-600" },
  delivered:  { label: "Delivered",  icon: "🎉", color: "text-green-600" },
  cancelled:  { label: "Cancelled",  icon: "❌", color: "text-red-500" },
  default:    { label: "Unknown",    icon: "📋", color: "text-gray-400" }
};

export default function OrderCard({ order, onClick }) {
  const {
    order_id,
    shop_name,
    shop_type,
    status,
    total_amount,
    created_at,
    item_count,
    items = [],
  } = order || {};

  const statusInfo = statusConfig[status] || statusConfig.default;

  return (
    <div
      className="bg-background-soft border border-divider rounded-xl p-4 flex gap-4 shadow-sm cursor-pointer transition hover:shadow-md"
      onClick={onClick}
      role="button"
      tabIndex={0}
      aria-label={`Order ${order_id} from ${shop_name}`}
    >
      <div className="flex flex-col items-center justify-center">
        <div className={`text-2xl ${statusInfo.color}`}>{statusInfo.icon}</div>
        <span className="text-xs mt-1 font-semibold capitalize">{statusInfo.label}</span>
      </div>
      <div className="flex-1 min-w-0">
        <div className="flex justify-between items-center">
          <h3 className="font-semibold text-base truncate">{shop_name || "Shop"}</h3>
          <span className="text-xs text-text-secondary ml-2">#{order_id}</span>
        </div>
        <div className="flex justify-between items-center mt-1">
          <span className="text-xs text-text-secondary capitalize">{shop_type}</span>
          <span className="text-xs text-text-secondary">
            {item_count || (items?.length ?? 0)} item{(item_count ?? items?.length) > 1 ? "s" : ""}
          </span>
        </div>
        <div className="flex justify-between items-end mt-2">
          <span className="text-lg font-bold text-primary">₹{parseFloat(total_amount).toFixed(2)}</span>
          <span className="text-xs text-text-tertiary">
            {created_at
              ? new Date(created_at).toLocaleDateString("en-IN", {
                  day: "2-digit",
                  month: "short",
                  year: "2-digit",
                })
              : ""}
          </span>
        </div>
      </div>
    </div>
  );
}


===== FILE: src/components/organisms/OrderSummarySection.jsx =====

import React from 'react';
import { Heading, BodyText } from '../atoms/Typography';

export default function OrderSummarySection({ items, totalAmount, deliveryCharges, finalAmount }) {
  return (
    <div className="bg-white rounded-xl shadow p-4 space-y-4">
      <Heading size="md">Order Summary</Heading>

      <div className="space-y-2">
        {items.map((item) => (
          <div key={item.id} className="flex justify-between items-center">
            <BodyText className="font-medium">{item.name} × {item.quantity}</BodyText>
            <BodyText className="font-medium">₹{item.subtotal}</BodyText>
          </div>
        ))}
      </div>

      <div className="border-t pt-3 space-y-1">
        <div className="flex justify-between">
          <BodyText>Subtotal</BodyText>
          <BodyText>₹{totalAmount}</BodyText>
        </div>
        <div className="flex justify-between">
          <BodyText>Delivery Charges</BodyText>
          <BodyText>₹{deliveryCharges}</BodyText>
        </div>
      </div>

      <div className="border-t pt-3 flex justify-between items-center">
        <Heading size="sm">Total</Heading>
        <Heading size="sm" className="text-primary">₹{finalAmount}</Heading>
      </div>
    </div>
  );
}


===== FILE: src/components/organisms/PaymentMethodSelector.jsx =====

import React from 'react';
import { BodyText, Heading } from '../atoms/Typography';
import Button from '../atoms/Button';

export default function CartItemCard({ item, onRemove, onUpdateQuantity }) {
  return (
    <div className="flex items-center bg-white shadow-sm rounded-lg p-4 gap-4">
      {/* Item Image */}
      <div className="w-20 h-20 bg-gray-200 rounded-md overflow-hidden">
        {item.image_url ? (
          <img src={item.image_url} alt={item.title} className="object-cover w-full h-full" />
        ) : (
          <div className="flex items-center justify-center text-2xl">📦</div>
        )}
      </div>

      {/* Item Details */}
      <div className="flex-1">
        <Heading size="sm" className="text-gray-800">{item.title}</Heading>
        <BodyText className="text-gray-500">
          {item.brand && `${item.brand} • `}
          {item.pack_size} {item.unit}
        </BodyText>
        <div className="flex items-center gap-2 mt-1">
          <Heading size="sm" className="text-primary">₹{item.price}</Heading>
          {item.mrp && item.mrp > item.price && (
            <>
              <span className="text-gray-400 line-through text-sm">₹{item.mrp}</span>
              <span className="text-green-500 text-xs font-medium">
                {Math.round(((item.mrp - item.price) / item.mrp) * 100)}% OFF
              </span>
            </>
          )}
        </div>

        {/* Quantity Controls */}
        <div className="flex items-center gap-2 mt-3">
          <Button size="sm" variant="outline" onClick={() => onUpdateQuantity(item.id, item.quantity - 1)} disabled={item.quantity <= 1}>
            -
          </Button>
          <span className="px-2 font-medium">{item.quantity}</span>
          <Button size="sm" variant="outline" onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}>
            +
          </Button>
        </div>
      </div>

      {/* Remove Button */}
      <button
        className="text-red-500 text-sm"
        onClick={() => onRemove(item.id)}
      >
        Remove
      </button>
    </div>
  );
}


===== FILE: src/components/organisms/ShopListSection.jsx =====

// src/components/organisms/ShopListSection.jsx
import React from "react";
import clsx from "clsx";
import { Heading, BodyText } from "../atoms/Typography";

/**
 * ShopListSection organism
 * Props:
 * - title: string or node (section title)
 * - subtitle: string or node (optional)
 * - action: node (e.g., filter button, "See All" link)
 * - horizontal: boolean (carousel style, for featured)
 * - children: shop cards
 * - empty: ReactNode or string to show when list is empty
 * - className: extra classes
 * - ...rest
 */
export default function ShopListSection({
  title,
  subtitle,
  action,
  horizontal = false,
  children,
  empty = "No shops to show.",
  className = "",
  ...rest
}) {
  const isEmpty =
    !children || (Array.isArray(children) && children.length === 0);

  return (
    <section className={clsx("mb-6", className)} {...rest}>
      {(title || subtitle || action) && (
        <div className="flex items-end justify-between mb-3 gap-2">
          <div>
            {title && (
              <Heading level={3} className="mb-0.5 leading-tight">
                {title}
              </Heading>
            )}
            {subtitle && (
              <BodyText size="sm" color="secondary">
                {subtitle}
              </BodyText>
            )}
          </div>
          {action && (
            <div className="shrink-0">{action}</div>
          )}
        </div>
      )}
      {isEmpty ? (
        typeof empty === "string" ? (
          <BodyText color="secondary" className="text-center py-8">{empty}</BodyText>
        ) : (
          empty
        )
      ) : horizontal ? (
        <div className="flex gap-4 overflow-x-auto pb-1 -mx-2 px-2 snap-x snap-mandatory">
          {React.Children.map(children, (child, idx) =>
            React.cloneElement(child, {
              className: clsx("snap-center shrink-0", child.props.className),
            })
          )}
        </div>
      ) : (
        <div className="flex flex-col gap-3">
          {children}
        </div>
      )}
    </section>
  );
}


===== FILE: src/components/organisms/TabSelector.jsx =====

// src/components/organisms/TabSelector.jsx

import React from "react";

/**
 * TabSelector
 * Props:
 *   tabs: string[] | { label, value }[]     // Array of tab labels or objects
 *   value: string | number                  // Currently selected value
 *   onChange: (value) => void               // Callback when tab changes
 *   className: string (optional)
 */
export default function TabSelector({
  tabs = [],
  value,
  onChange,
  className = "",
}) {
  // Support both string and object array
  const getTabProps = (tab) =>
    typeof tab === "object"
      ? { label: tab.label, value: tab.value }
      : { label: tab, value: tab };

  return (
    <div
      className={`flex gap-2 overflow-x-auto pb-1 ${className}`}
      role="tablist"
    >
      {tabs.map((tab, idx) => {
        const { label, value: tabValue } = getTabProps(tab);
        const selected = value === tabValue;
        return (
          <button
            key={tabValue ?? idx}
            type="button"
            className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition
              ${
                selected
                  ? "bg-primary text-white shadow"
                  : "bg-background-soft text-text-primary border border-divider"
              }
              focus:outline-none focus:ring-2 focus:ring-primary/60`}
            aria-selected={selected}
            aria-current={selected ? "page" : undefined}
            onClick={() => onChange?.(tabValue)}
          >
            {label}
          </button>
        );
      })}
    </div>
  );
}


===== FILE: src/main.jsx =====

// src/main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

// Import global Tailwind styles (and your custom CSS if any)
import "./styles/index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


===== FILE: src/pages/AboutHabrio.jsx =====

// File: src/pages/AboutHabrio.jsx
import React from 'react';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import SectionCard from '../components/molecules/SectionCard';
import { BodyText, Heading } from '../components/atoms/Typography';
import EmptyState from '../components/organisms/EmptyState';

export default function AboutHabrio() {
  return (
    <MobileLayout>
      <PageHeader back={null} title="About Habrio" />
      <ScreenContainer>
        {/* App Logo & Info */}
        <SectionCard padding="lg" className="bg-gradient-to-br from-primary to-accent text-white">
          <div className="flex flex-col items-center space-y-2">
            <div className="w-20 h-20 bg-white/20 rounded-2xl flex items-center justify-center text-4xl">
              🏘️
            </div>
            <Heading level={1} className="text-white">
              Habrio
            </Heading>
            <BodyText size="md" className="text-white/90">
              Your society's very own super app
            </BodyText>
            <BodyText size="sm" className="text-white/80">
              Version 1.0.0
            </BodyText>
          </div>
        </SectionCard>

        {/* What is Habrio */}
        <SectionCard title="What is Habrio?">
          <BodyText className="mb-4 text-sm text-[var(--text-secondary)] leading-relaxed">
            Habrio is a hyperlocal commerce platform that connects residents with local
            shops and services within their society. We make it easy to discover, order,
            and get things delivered right to your doorstep from trusted local vendors.
          </BodyText>
          {[
            { emoji: '🏪', text: 'Browse local shops and services in your society' },
            { emoji: '🛒', text: 'Order groceries, medicines, and daily essentials' },
            { emoji: '🚚', text: 'Get fast delivery right to your door' },
            { emoji: '💳', text: 'Pay securely using wallet or cash on delivery' },
          ].map(({ emoji, text }, i) => (
            <div key={i} className="flex items-center space-x-3 mb-3">
              <span className="text-2xl">{emoji}</span>
              <BodyText size="sm">{text}</BodyText>
            </div>
          ))}
        </SectionCard>

        {/* Our Mission */}
        <SectionCard title="Our Mission">
          <BodyText className="text-sm text-[var(--text-secondary)] leading-relaxed">
            To empower local communities by creating a thriving ecosystem where residents
            can easily access local products and services while supporting neighborhood
            businesses. We believe in building stronger communities through convenient,
            reliable, and personalized local commerce.
          </BodyText>
        </SectionCard>

        {/* Key Features */}
        <SectionCard title="Key Features">
          <div className="grid grid-cols-2 gap-4">
            {[
              { emoji: '⚡', label: 'Fast Delivery', desc: 'Quick delivery within your society' },
              { emoji: '🔒', label: 'Secure Payment', desc: 'Safe and encrypted transactions' },
              { emoji: '📱', label: 'Real-time Tracking', desc: 'Track your orders live' },
              { emoji: '🤝', label: '24/7 Support', desc: 'Always here to help' },
            ].map(({ emoji, label, desc }, i) => (
              <div key={i} className="text-center">
                <div className="text-3xl mb-1">{emoji}</div>
                <Heading level={4} className="text-sm font-semibold mb-1">
                  {label}
                </Heading>
                <BodyText size="xs" className="text-[var(--text-secondary)]">
                  {desc}
                </BodyText>
              </div>
            ))}
          </div>
        </SectionCard>

        {/* Contact Information */}
        <SectionCard title="Contact Us">
          {[
            { emoji: '📧', label: 'support@habrio.com' },
            { emoji: '📞', label: '+91 88000 00000' },
            { emoji: '🌐', label: 'www.habrio.com' },
          ].map(({ emoji, label }, i) => (
            <div key={i} className="flex items-center space-x-3 mb-3">
              <span className="text-lg">{emoji}</span>
              <BodyText size="sm" className="text-primary">
                {label}
              </BodyText>
            </div>
          ))}
        </SectionCard>

        {/* Legal */}
        <SectionCard title="Legal">
          {[
            { text: 'Terms & Conditions', onClick: () => alert('Terms & Conditions') },
            { text: 'Privacy Policy', onClick: () => alert('Privacy Policy') },
            { text: 'Refund & Cancellation Policy', onClick: () => alert('Refund & Cancellation Policy') },
          ].map(({ text, onClick }, i) => (
            <button
              key={i}
              onClick={onClick}
              className="text-sm text-primary font-medium text-left w-full mb-2"
            >
              {text}
            </button>
          ))}
        </SectionCard>

        {/* App Credits */}
        <SectionCard className="text-center">
          <BodyText size="sm" className="font-semibold mb-1">
            Made with ❤️ for your neighbourhood
          </BodyText>
          <BodyText size="xs" color="secondary">
            © 2024 Habrio. All rights reserved.
          </BodyText>
        </SectionCard>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/AddMoney.jsx =====

// File: src/pages/AddMoney.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import SectionCard from '../components/molecules/SectionCard';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { BodyText, Heading } from '../components/atoms/Typography';
import EmptyState from '../components/organisms/EmptyState';

export default function AddMoney() {
  const navigate = useNavigate();
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);

  const quickAmounts = [100, 200, 500, 1000, 2000, 5000];

  async function handleAddMoney() {
    const value = parseFloat(amount);
    if (!value || value < 1) {
      alert('Please enter a valid amount (minimum ₹1)');
      return;
    }
    if (value > 50000) {
      alert('Maximum amount allowed is ₹50,000');
      return;
    }
    setLoading(true);
    try {
      const token = localStorage.getItem('auth_token');
      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/wallet/load`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: token },
        body: JSON.stringify({ amount: value, reference: 'Manual wallet top-up' }),
      });
      const data = await res.json();
      if (data.status === 'success') {
        navigate('/wallet');
      } else {
        alert(data.message || 'Failed to add money');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  return (
    <MobileLayout>
      <PageHeader title="Add Money" />
      <ScreenContainer>
        {/* Intro Card */}
        <SectionCard className="bg-gradient-to-r from-primary to-primary-dark text-white">
          <div className="flex flex-col items-center space-y-2 py-6">
            <div className="text-5xl">💰</div>
            <Heading level={3} className="text-lg">
              Add Money to Wallet
            </Heading>
            <BodyText className="text-sm opacity-90">
              Secure and instant wallet recharge
            </BodyText>
          </div>
        </SectionCard>

        {/* Amount Input */}
        <SectionCard>
          <Heading level={4} className="mb-4">
            Enter Amount
          </Heading>
          <div className="relative mb-4">
            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-lg">₹</span>
            <Input
              type="number"
              placeholder="0"
              value={amount}
              onChange={e => setAmount(e.target.value)}
              className="pl-10 text-center text-xl font-semibold py-3"
            />
          </div>
          <BodyText className="mb-2 text-sm text-text-secondary font-medium">
            Quick Select
          </BodyText>
          <div className="grid grid-cols-3 gap-2">
            {quickAmounts.map(val => (
              <Button
                key={val}
                variant={amount === String(val) ? 'primary' : 'outline'}
                onClick={() => setAmount(String(val))}
                className="py-2 text-sm"
              >
                ₹{val}
              </Button>
            ))}
          </div>
        </SectionCard>

        {/* Payment Method */}
        <SectionCard title="Payment Method">
          {/* For now only one method; extendable */}
          <div className="flex items-center space-x-3 p-4 bg-white border-2 border-primary rounded-lg">
            <div className="w-5 h-5 rounded-full bg-primary flex items-center justify-center">
              <div className="w-2 h-2 rounded-full bg-white" />
            </div>
            <div>
              <BodyText size="sm" className="font-semibold">
                💳 UPI / Cards / NetBanking
              </BodyText>
              <BodyText size="xs" color="secondary">
                Pay securely using UPI, Debit/Credit cards or NetBanking
              </BodyText>
            </div>
          </div>
        </SectionCard>

        {/* Security Notice */}
        <SectionCard className="bg-green-50 border-green-200">
          <div className="flex items-start space-x-3">
            <div className="text-lg mt-1">🔒</div>
            <div>
              <BodyText size="sm" className="font-semibold text-green-700 mb-1">
                100% Secure Payment
              </BodyText>
              <ul className="list-disc pl-5 text-xs text-text-secondary space-y-1">
                <li>All transactions are encrypted and secure</li>
                <li>Money will be instantly added to your wallet</li>
                <li>No additional charges or hidden fees</li>
              </ul>
            </div>
          </div>
        </SectionCard>

        {/* Action Button */}
        <Button
          className="w-full my-4"
          onClick={handleAddMoney}
          disabled={loading || !amount || parseFloat(amount) < 1}
        >
          {loading ? 'Processing...' : `Add ₹${amount || '0'} to Wallet`}
        </Button>

        <BodyText size="xs" color="secondary" className="text-center mb-6">
          By proceeding, you agree to our{' '}
          <span className="text-primary font-medium">Terms & Conditions</span> and{' '}
          <span className="text-primary font-medium">Refund Policy</span>
        </BodyText>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/BasicOnboarding.jsx =====

// File: src/pages/BasicOnboarding.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import SectionCard from '../components/molecules/SectionCard';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { BodyText, Heading } from '../components/atoms/Typography';
import EmptyState from '../components/organisms/EmptyState';

export default function BasicOnboarding() {
  const navigate = useNavigate();
  const [data, setData] = useState({ name: '', city: '', society: '' });
  const [submitting, setSubmitting] = useState(false);

  function handleChange(e) {
    setData(prev => ({ ...prev, [e.target.name]: e.target.value.trimStart() }));
  }

  async function handleSubmit() {
    const token = localStorage.getItem('auth_token');
    const { name, city, society } = data;
    if (!token) return alert('Missing login token. Please login again.');
    if (!name || !city || !society) return alert('All fields are required');

    setSubmitting(true);
    try {
      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/onboarding/basic`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: token },
        body: JSON.stringify({ name, city, society, role: 'consumer' }),
      });
      const result = await res.json();
      if (result.status === 'success') {
        navigate('/onboarding/consumer');
      } else {
        alert(result.message || 'Onboarding failed');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setSubmitting(false);
    }
  }

  return (
    <MobileLayout>
      <PageHeader back={null} title="Tell us about yourself" />
      <ScreenContainer>
        <SectionCard>
          <div className="space-y-4">
            <div>
              <Heading level={2} className="text-center">
                Basic Details
              </Heading>
              <BodyText size="sm" color="secondary" className="text-center">
                Help us get to know you better
              </BodyText>
            </div>
            <div className="space-y-3">
              <div>
                <BodyText size="sm" className="mb-1">Full Name</BodyText>
                <Input
                  name="name"
                  placeholder="Ashish Dabas"
                  value={data.name}
                  onChange={handleChange}
                />
              </div>
              <div>
                <BodyText size="sm" className="mb-1">City</BodyText>
                <Input
                  name="city"
                  placeholder="Noida"
                  value={data.city}
                  onChange={handleChange}
                />
              </div>
              <div>
                <BodyText size="sm" className="mb-1">Society</BodyText>
                <Input
                  name="society"
                  placeholder="Hyde Park"
                  value={data.society}
                  onChange={handleChange}
                />
              </div>
            </div>
            <Button
              className="w-full mt-4"
              onClick={handleSubmit}
              disabled={submitting}
            >
              {submitting ? 'Submitting...' : 'Complete'}
            </Button>
          </div>
        </SectionCard>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Cart.jsx =====

// File: src/pages/Cart.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import EmptyState from '../components/organisms/EmptyState';
import BillSummarySection from '../components/organisms/BillSummarySection';
import CartItemCard from '../components/organisms/CartItemCard';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import { get, post } from '../utils/api';

export default function Cart() {
  const navigate = useNavigate();
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [clearing, setClearing] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchCart(token);
  }, []);

  async function fetchCart(token) {
    setLoading(true);
    try {
      const { status, cart, total_price, total_savings } = await get('/cart/view', { token });
      if (status === 'success') {
        setItems(cart);
        setTotals({ total_price, total_savings });
      }
    } catch {}
    setLoading(false);
  }

  async function handleClear() {
    if (!window.confirm('Clear all items?')) return;
    setClearing(true);
    try {
      const token = localStorage.getItem('auth_token');
      await post('/cart/clear', null, { token });
      fetchCart(token);
    } catch {}
    setClearing(false);
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="My Cart" />
        <ScreenContainer>
          <div className="flex flex-col items-center py-12">
            <Spinner size={40} className="mb-4 text-primary" />
            <p className="text-text-secondary">Loading cart…</p>
          </div>
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (items.length === 0) {
    return (
      <MobileLayout>
        <PageHeader title="My Cart" />
        <ScreenContainer>
          <EmptyState
            icon="🛒"
            title="Your cart is empty"
            description="Add items from shops to get started."
            actionLabel="Browse Shops"
            onAction={() => navigate('/shops')}
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title={`My Cart (${items.length})`} />
      <ScreenContainer>
        <div className="flex justify-end mb-4 px-4">
          <button
            disabled={clearing}
            onClick={handleClear}
            className="text-sm text-error font-medium"
          >
            {clearing ? 'Clearing…' : 'Clear All'}
          </button>
        </div>

        <div className="space-y-4 px-4">
          {items.map(item => (
            <CartItemCard
              key={item.id}
              item={item}
              onQuantityChange={(qty) => {/* call update API then refresh */}}
              onRemove={() => {/* call remove API then refresh */}}
            />
          ))}
        </div>

        <div className="px-4 mt-6">
          <BillSummarySection
            items={[
              { label: 'Subtotal', amount: totals.total_price + totals.total_savings },
              { label: 'Savings', amount: totals.total_savings, isDiscount: true },
              { label: 'Delivery Fee', amount: 0, isFree: true },
            ]}
            totalAmount={totals.total_price}
            actionLabel={`Proceed to Checkout • ₹${totals.total_price}`}
            onAction={() => navigate('/checkout')}
          />
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Checkout.jsx =====

// File: src/pages/Checkout.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import SectionCard from '../components/molecules/SectionCard';
import Button from '../components/atoms/Button';
import { BodyText, Heading } from '../components/atoms/Typography';
import EmptyState from '../components/organisms/EmptyState';
import PaymentMethodSelector from '../components/organisms/PaymentMethodSelector';
import OrderSummarySection from '../components/organisms/OrderSummarySection';
import { get, post } from '../utils/api';

export default function Checkout() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [cartItems, setCartItems] = useState([]);
  const [walletBalance, setWalletBalance] = useState(0);
  const [paymentMode, setPaymentMode] = useState('wallet');
  const [deliveryNotes, setDeliveryNotes] = useState('');
  const [placing, setPlacing] = useState(false);
  const [summary, setSummary] = useState({ subtotal: 0, savings: 0, total: 0 });

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    Promise.all([loadCart(token), loadWallet(token)]).finally(() =>
      setLoading(false)
    );
  }, []);

  async function loadCart(token) {
    try {
      const { status, cart, total_price, total_savings } = await get('/cart/view', { token });
      if (status === 'success') {
        if (cart.length === 0) navigate('/cart');
        setCartItems(cart);
        setSummary({
          subtotal: total_price + total_savings,
          savings: total_savings,
          total: total_price,
        });
      }
    } catch {}
  }

  async function loadWallet(token) {
    try {
      const { status, balance } = await get('/wallet', { token });
      if (status === 'success') setWalletBalance(balance);
    } catch {}
  }

  async function handlePlaceOrder() {
    if (paymentMode === 'wallet' && walletBalance < summary.total) {
      return alert('Insufficient wallet balance. Please add money.');
    }
    setPlacing(true);
    try {
      const token = localStorage.getItem('auth_token');
      const body = { payment_mode: paymentMode, delivery_notes: deliveryNotes };
      const { status, order_id, message } = await post('/order/confirm', body, { token });
      if (status === 'success') {
        navigate(`/order/${order_id}`);
      } else {
        alert(message || 'Failed to place order');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setPlacing(false);
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="Checkout" />
        <ScreenContainer className="flex-center">
          <Heading level={3}>Loading checkout…</Heading>
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="Checkout" />
      <ScreenContainer className="space-y-6">
        {/* Delivery Address */}
        <SectionCard>
          <Heading level={4}>Delivery Address</Heading>
          <BodyText className="mt-1 text-text-secondary">
            Your registered address will be used for delivery.
          </BodyText>
        </SectionCard>

        {/* Order Items */}
        <OrderSummarySection items={cartItems} />

        {/* Payment Method */}
        <PaymentMethodSelector
          walletBalance={walletBalance}
          value={paymentMode}
          onChange={setPaymentMode}
          onAddMoney={() => navigate('/wallet/add')}
        />

        {/* Delivery Notes */}
        <SectionCard title="Delivery Instructions (Optional)">
          <textarea
            rows={3}
            value={deliveryNotes}
            onChange={e => setDeliveryNotes(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded"
            placeholder="Any special instructions…"
          />
        </SectionCard>

        {/* Bill Summary */}
        <SectionCard>
          <div className="space-y-2">
            <div className="flex justify-between">
              <BodyText>Subtotal</BodyText>
              <BodyText>₹{summary.subtotal}</BodyText>
            </div>
            {summary.savings > 0 && (
              <div className="flex justify-between text-success">
                <BodyText>Savings</BodyText>
                <BodyText>-₹{summary.savings}</BodyText>
              </div>
            )}
            <div className="flex justify-between">
              <BodyText>Delivery Fee</BodyText>
              <BodyText>FREE</BodyText>
            </div>
            <hr />
            <div className="flex justify-between font-semibold text-lg">
              <BodyText>Total</BodyText>
              <BodyText>₹{summary.total}</BodyText>
            </div>
          </div>
        </SectionCard>

        {/* Place Order */}
        <Button
          onClick={handlePlaceOrder}
          disabled={placing || (paymentMode === 'wallet' && walletBalance < summary.total)}
          className="w-full"
        >
          {placing ? 'Placing Order…' : `Place Order • ₹${summary.total}`}
        </Button>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/ConsumerOnboarding.jsx =====

// File: src/pages/ConsumerOnboarding.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import SectionCard from '../components/molecules/SectionCard';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { BodyText, Heading } from '../components/atoms/Typography';

export default function ConsumerOnboarding() {
  const navigate = useNavigate();
  const [flatNumber, setFlatNumber] = useState('');
  const [submitting, setSubmitting] = useState(false);

  async function handleSubmit() {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      return alert('Missing login token. Please login again.');
    }
    if (!flatNumber.trim()) {
      return alert('Please enter your flat or house number');
    }
    setSubmitting(true);
    try {
      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/onboarding/consumer`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token,
        },
        body: JSON.stringify({ flat_number: flatNumber.trim() }),
      });
      const result = await res.json();
      if (result.status === 'success') {
        navigate('/home');
      } else {
        alert(result.message || 'Consumer onboarding failed');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setSubmitting(false);
    }
  }

  return (
    <MobileLayout>
      <PageHeader back={null} title="Your Home Address" />
      <ScreenContainer>
        <SectionCard>
          <div className="space-y-4">
            <div>
              <Heading level={2} className="text-center">
                Enter Your Flat / House Number
              </Heading>
            </div>
            <div>
              <BodyText size="sm" className="mb-1">
                Flat / House Number
              </BodyText>
              <Input
                placeholder="e.g., A-302"
                value={flatNumber}
                onChange={e => setFlatNumber(e.target.value.trimStart())}
              />
            </div>
            <Button
              className="w-full mt-4"
              onClick={handleSubmit}
              disabled={submitting}
            >
              {submitting ? 'Submitting...' : 'Complete'}
            </Button>
          </div>
        </SectionCard>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Home.jsx =====

// src/pages/Home.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import HeroSection from '../components/organisms/HeroSection';
import ShopListSection from '../components/organisms/ShopListSection';
import WalletCard from '../components/molecules/WalletCard';
import SearchBar from '../components/molecules/SearchBar';
import CategoryCard from '../components/molecules/CategoryCard';
import FeaturedShopCard from '../components/molecules/FeaturedShopCard';
import NearbyShopCard from '../components/molecules/NearbyShopCard';
import EmptyState from '../components/organisms/EmptyState';
import { get } from '../utils/api';
import {
  HiShoppingCart,
  HiAnnotation,
  HiCollection,
  HiDeviceMobile,
  HiCog,
  HiSparkles,
  HiUser,
} from 'react-icons/hi';

export default function Home() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [walletBalance, setWalletBalance] = useState(0);
  const [featuredShops, setFeaturedShops] = useState([]);
  const [nearbyShops, setNearbyShops] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState('');
  const [searching, setSearching] = useState(false);

  const shopCategories = [
    { name: 'Grocery', icon: <HiShoppingCart />, type: 'grocery' },
    { name: 'Pharmacy', icon: <HiAnnotation />, type: 'pharmacy' },
    { name: 'Restaurant', icon: <HiCollection />, type: 'restaurant' },
    { name: 'Electronics', icon: <HiDeviceMobile />, type: 'electronics' },
    { name: 'Fashion', icon: <HiSparkles />, type: 'fashion' },
    { name: 'Services', icon: <HiCog />, type: 'services' },
  ];

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    Promise.all([fetchProfile(), fetchWallet(), fetchShops()]).finally(() =>
      setLoading(false)
    );
  }, []);

  async function fetchProfile() {
    try {
      const { status, data } = await get('/profile/me');
      if (status === 'success') setUser(data);
    } catch {}
  }

  async function fetchWallet() {
    try {
      const { status, balance } = await get('/wallet');
      if (status === 'success') setWalletBalance(balance);
    } catch {}
  }

  async function fetchShops() {
    try {
      const { status, shops } = await get('/shops?status=open');
      if (status === 'success') {
        setFeaturedShops(shops.filter((s) => s.featured).slice(0, 3));
        setNearbyShops(shops.slice(0, 6));
      }
    } catch {}
  }

  function handleSearchSubmit(value) {
    if (value.trim()) {
      navigate(`/shops/search?q=${encodeURIComponent(value)}`);
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <ScreenContainer>
          <div className="flex items-center justify-center h-screen">
            <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-primary"></div>
          </div>
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <ScreenContainer className="px-4 py-6 space-y-6">
        {/* Hero Section */}
        <HeroSection
          greeting={`Hello, ${user?.name || 'User'}! 👋`}
          subtext={`${user?.society}, ${user?.city}`}
          avatar={<HiUser className="text-2xl text-primary" />}
          action={
            <SearchBar
              value={search}
              onChange={(v) => setSearch(v)}
              onSearch={handleSearchSubmit}
              loading={searching}
              placeholder="Search shops or items…"
            />
          }
        />

        {/* Wallet Balance */}
        <WalletCard
          amount={`₹${walletBalance.toFixed(2)}`}
          label="Wallet Balance"
          icon={<HiShoppingCart className="text-white text-xl" />}
          color="gradient"
          cta="Add Money"
          onCta={() => navigate('/wallet/add')}
        />

        {/* Categories */}
        <section>
          <h2 className="text-lg font-semibold mb-3">Categories</h2>
          <div className="grid grid-cols-3 gap-4">
            {shopCategories.map((cat) => (
              <CategoryCard
                key={cat.type}
                icon={cat.icon}
                label={cat.name}
                active={false}
                onClick={() => navigate(`/shops?type=${cat.type}`)}
              />
            ))}
          </div>
        </section>

        {/* Featured Shops */}
        <section>
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-lg font-semibold">Featured Shops</h2>
            <button
              className="text-primary text-sm font-medium"
              onClick={() => navigate('/shops')}
            >
              See All
            </button>
          </div>
          {featuredShops.length ? (
            <div className="flex overflow-x-auto gap-4">
              {featuredShops.map((shop) => (
                <FeaturedShopCard
                  key={shop.id}
                  image={shop.logo_url}
                  name={shop.shop_name}
                  category={shop.shop_type}
                  status={shop.is_open ? 'open' : 'closed'}
                  badge={shop.verified ? 'Verified' : undefined}
                  onClick={() => navigate(`/shop/${shop.id}`)}
                />
              ))}
            </div>
          ) : (
            <EmptyState title="No Featured Shops" />
          )}
        </section>

        {/* Nearby Shops */}
        <section>
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-lg font-semibold">Nearby Shops</h2>
            <button
              className="text-primary text-sm font-medium"
              onClick={() => navigate('/shops')}
            >
              View All
            </button>
          </div>
          {nearbyShops.length ? (
            <div className="space-y-4">
              {nearbyShops.map((shop) => (
                <NearbyShopCard
                  key={shop.id}
                  image={shop.logo_url}
                  name={shop.shop_name}
                  category={shop.shop_type}
                  address={shop.society}
                  status={shop.is_open ? 'open' : 'closed'}
                  delivers={shop.delivers}
                  onClick={() => navigate(`/shop/${shop.id}`)}
                />
              ))}
            </div>
          ) : (
            <EmptyState title="No Nearby Shops" />
          )}
        </section>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Login.jsx =====

// File: src/pages/Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import Button from '../components/atoms/Button';
import Input from '../components/atoms/Input';

export default function Login() {
  const [phone, setPhone] = useState('');
  const [sending, setSending] = useState(false);
  const navigate = useNavigate();
  const backendUrl = import.meta.env.VITE_BACKEND_URL;

  async function sendOtp() {
    if (!/^\d{10}$/.test(phone)) {
      alert('Please enter a valid 10‑digit phone number');
      return;
    }
    setSending(true);
    try {
      const res = await fetch(`${backendUrl}/send-otp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: '+91' + phone }),
      });
      const data = await res.json();
      if (data.status === 'success') {
        navigate('/otp', { state: { phone } });
      } else {
        alert('❌ ' + (data.message || 'Failed to send OTP'));
      }
    } catch {
      alert('Something went wrong while sending OTP');
    }
    setSending(false);
  }

  return (
    <MobileLayout>
      {/* make this fill the frame and center its contents */}
      <ScreenContainer className="flex flex-col justify-center items-center h-full">
        {/* Logo + Heading */}
        <div className="flex flex-col items-center mb-8">
          <div className="
              bg-gradient-to-r from-primary to-primary-dark
              w-20 h-20 rounded-2xl
              flex items-center justify-center
              shadow-lg mb-5
            ">
            <span className="text-onPrimary text-3xl">📲</span>
          </div>
          <h2 className="text-2xl font-bold mb-1 text-text-primary">
            Log in to Habrio
          </h2>
          <p className="text-sm text-text-secondary mb-4 text-center">
            Enter your mobile number to continue
          </p>
        </div>

        {/* Form */}
        <form
          onSubmit={(e) => {
            e.preventDefault();
            sendOtp();
          }}
          className="w-full space-y-4"
        >
          <div className="flex items-center gap-2">
            <span className="
                bg-background-soft border border-divider
                rounded-lg px-3 py-2 font-semibold text-base
              ">
              +91
            </span>
            <Input
              type="tel"
              maxLength={10}
              autoFocus
              placeholder="9876543210"
              className="flex-1 text-lg"
              value={phone}
              onChange={(e) => setPhone(e.target.value.replace(/\D/g, ''))}
            />
          </div>

          <Button
            type="submit"
            size="lg"
            fullWidth
            disabled={sending || phone.length !== 10}
            loading={sending}
          >
            Send OTP
          </Button>
        </form>

        {/* Terms & Privacy */}
        <p className="mt-8 text-xs text-text-secondary text-center leading-relaxed">
          By continuing, you agree to our{' '}
          <a href="#" className="text-primary underline font-medium">
            Terms & Conditions
          </a>{' '}
          and{' '}
          <a href="#" className="text-primary underline font-medium">
            Privacy Policy
          </a>
        </p>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/OrderDetail.jsx =====

// File: src/pages/OrderDetail.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get, post } from '../utils/api';

const STATUS_META = {
  pending: { icon: '⏳', color: 'text-warning' },
  accepted: { icon: '✅', color: 'text-info' },
  confirmed: { icon: '📦', color: 'text-info' },
  delivered: { icon: '🎉', color: 'text-success' },
  cancelled: { icon: '❌', color: 'text-error' },
};

export default function OrderDetail() {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchOrder(token);
    fetchMsgs(token);
    // eslint-disable-next-line
  }, [orderId]);

  async function fetchOrder(token) {
    setLoading(true);
    try {
      const res = await get('/order/history', { token });
      if (res.status === 'success') {
        const found = res.orders.find(o => `${o.order_id}` === `${orderId}`);
        setOrder(found || null);
      }
    } catch {}
    setLoading(false);
  }

  async function fetchMsgs(token) {
    try {
      const res = await get(`/order/consumer/messages/${orderId}`, { token });
      if (res.status === 'success') setMessages(res.messages || []);
    } catch {}
  }

  async function cancelOrder() {
    if (!window.confirm('Are you sure you want to cancel this order?')) return;
    try {
      const token = localStorage.getItem('auth_token');
      const res = await post(`/order/consumer/cancel/${orderId}`, {}, { token });
      if (res.status === 'success') {
        alert('Order cancelled successfully');
        fetchOrder(token);
      } else {
        alert(res.message || 'Failed to cancel order');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="Order Details" />
        <ScreenContainer className="flex justify-center py-20">
          <Spinner size={48} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (!order) {
    return (
      <MobileLayout>
        <PageHeader title="Order Details" />
        <ScreenContainer>
          <EmptyState
            icon="📦"
            title="Order not found"
            description="The order you're looking for doesn't exist."
            actionLabel="Back to Orders"
            onAction={() => navigate('/orders')}
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  const meta = STATUS_META[order.status] || { icon: '📋', color: 'text-secondary' };
  const orderAmount = order.final_amount || order.total_amount;
  const items = order.items || [];

  return (
    <MobileLayout>
      <PageHeader title={`Order #${order.order_id}`} />
      <ScreenContainer className="space-y-6">

        {/* Status Section */}
        <div className="bg-background-soft border border-divider rounded-lg p-6 text-center">
          <div className="text-4xl mb-2">
            {meta.icon}
          </div>
          <div className={`font-bold text-lg capitalize mb-2 ${meta.color}`}>
            {order.status}
          </div>
          <div className="text-sm text-secondary mb-3">
            Order placed on {new Date(order.created_at).toLocaleString('en-IN', {
              day: 'numeric', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit'
            })}
          </div>
          <div className="flex justify-center gap-2 mt-3">
            {['pending', 'accepted', 'confirmed', 'delivered'].map((stat, idx) => {
              const active = ['pending', 'accepted', 'confirmed', 'delivered'].indexOf(order.status) >= idx;
              const cancelled = order.status === 'cancelled';
              return (
                <span
                  key={stat}
                  className={`w-3 h-3 rounded-full ${cancelled
                    ? 'bg-error'
                    : active ? 'bg-primary' : 'bg-divider'
                  }`}
                />
              );
            })}
          </div>
        </div>

        {/* Items Section */}
        <div className="bg-background-soft border border-divider rounded-lg p-4">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-10 h-10 flex items-center justify-center rounded-full bg-gradient-to-br from-primary to-primary-dark text-white text-xl">
              🏪
            </div>
            <div>
              <div className="font-semibold text-sm">Shop #{order.shop_id}</div>
              <div className="text-xs text-secondary">Items delivered together</div>
            </div>
          </div>
          <div className="divide-y divide-divider">
            {items.map((item, idx) => (
              <div key={idx} className="flex items-center gap-3 py-2">
                <div className="w-12 h-12 flex items-center justify-center rounded bg-divider text-xl">📦</div>
                <div className="flex-1">
                  <div className="font-medium text-sm">{item.name}</div>
                  <div className="text-xs text-secondary">Qty: {item.quantity} × ₹{item.unit_price}</div>
                </div>
                <div className="font-semibold text-base">₹{item.subtotal}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Payment & Delivery */}
        <div className="bg-background-soft border border-divider rounded-lg p-4">
          <div className="font-semibold mb-2">Payment & Delivery</div>
          <div className="flex justify-between text-sm mb-1">
            <span>Payment Method</span>
            <span className="font-medium">
              {order.payment_mode === 'wallet' ? '💳 Wallet' : '💵 Cash on Delivery'}
            </span>
          </div>
          <div className="flex justify-between text-sm mb-1">
            <span>Payment Status</span>
            <span className={`px-2 py-1 text-xs rounded ${order.payment_status === 'paid' ? 'bg-success text-white' : 'bg-warning text-white'}`}>
              {order.payment_status}
            </span>
          </div>
          <div className="flex justify-between text-sm mb-1">
            <span>Total Amount</span>
            <span className="font-bold text-primary text-base">₹{orderAmount}</span>
          </div>
          {order.delivery_notes && (
            <div className="mt-3 pt-2 border-t border-divider text-sm">
              <span className="font-medium">Delivery Notes:</span>
              <div className="text-secondary">{order.delivery_notes}</div>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col gap-3">
          {order.status === 'pending' && (
            <Button variant="outline-danger" onClick={cancelOrder}>Cancel Order</Button>
          )}
          {order.status === 'delivered' && (
            <div className="flex gap-3">
              <Button className="flex-1" onClick={() => navigate(`/order/${order.order_id}/rate`)}>Rate Order</Button>
              <Button variant="outline" className="flex-1" onClick={() => navigate(`/order/${order.order_id}/return`)}>Return Items</Button>
            </div>
          )}
          <Button
            variant="outline"
            onClick={() => navigate(`/order/${order.order_id}/messages`)}
            className="flex items-center gap-2"
          >
            💬 View Messages
            {messages.length > 0 && (
              <span className="ml-1 bg-primary text-white rounded-full px-2 text-xs">{messages.length}</span>
            )}
          </Button>
        </div>

        {/* Help Section */}
        <div className="bg-warning/10 border border-warning/30 rounded-lg p-4">
          <div className="flex items-center gap-3 mb-2">
            <span className="text-lg">🤝</span>
            <div>
              <div className="font-semibold text-sm">Need Help with this Order?</div>
              <div className="text-xs text-secondary">
                Our support team is here to help with any questions or issues.
              </div>
            </div>
          </div>
          <Button
            size="sm"
            onClick={() => navigate('/support')}
            className="mt-2"
          >
            Contact Support
          </Button>
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/OrderHistory.jsx =====

// File: src/pages/OrderHistory.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import TabSelector from '../components/organisms/TabSelector';
import EmptyState from '../components/organisms/EmptyState';
import OrderCard from '../components/organisms/OrderCard';
import { Spinner } from '../components/atoms/Loader';
import { get } from '../utils/api';

const tabs = [
  { key: 'all', label: 'All' },
  { key: 'active', label: 'Active' },
  { key: 'completed', label: 'Completed' },
  { key: 'cancelled', label: 'Cancelled' },
];

export default function OrderHistory() {
  const navigate = useNavigate();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchOrders(token);
  }, []);

  async function fetchOrders(token) {
    try {
      const { status, orders } = await get('/order/history', { token });
      if (status === 'success') setOrders(orders);
    } catch {
      // handle error silently
    } finally {
      setLoading(false);
    }
  }

  function filterOrders() {
    return orders.filter(o => {
      if (filter === 'all') return true;
      if (filter === 'active') return ['pending', 'accepted', 'confirmed'].includes(o.status);
      if (filter === 'completed') return o.status === 'delivered';
      if (filter === 'cancelled') return o.status === 'cancelled';
      return true;
    });
  }

  const filtered = filterOrders();

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="My Orders" />
        <ScreenContainer className="flex-center">
          <Spinner size={40} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (filtered.length === 0) {
    return (
      <MobileLayout>
        <PageHeader title="My Orders" />
        <ScreenContainer>
          <EmptyState
            icon="📦"
            title={filter === 'all' ? 'No orders yet' : `No ${filter} orders`}
            description={
              filter === 'all'
                ? 'Start shopping to place your first order.'
                : `You don't have any ${filter} orders.`
            }
            actionLabel={filter === 'all' ? 'Start Shopping' : null}
            onAction={filter === 'all' ? () => navigate('/shops') : undefined}
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="My Orders" />
      <ScreenContainer className="space-y-4">
        <TabSelector
          tabs={tabs}
          selectedKey={filter}
          onSelect={setFilter}
        />
        <div className="space-y-3">
          {filtered.map(order => (
            <OrderCard
              key={order.order_id}
              order={order}
              onClick={() => navigate(`/order/${order.order_id}`)}
            />
          ))}
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/OrderMessages.jsx =====

// File: src/pages/OrderMessages.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get, post } from '../utils/api';

export default function OrderMessages() {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [userPhone, setUserPhone] = useState('');

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');

    // fetch current user phone
    get('/profile/me', { token }).then(({ status, data }) => {
      if (status === 'success') setUserPhone(data.phone);
    });

    // fetch order messages
    fetchMessages();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [orderId, navigate]);

  async function fetchMessages() {
    const token = localStorage.getItem('auth_token');
    try {
      const { status, messages } = await get(
        `/order/consumer/messages/${orderId}`,
        { token }
      );
      if (status === 'success') setMessages(messages);
    } catch {
      // ignore
    } finally {
      setLoading(false);
    }
  }

  async function sendMessage() {
    if (!newMessage.trim()) return;
    setSending(true);
    const token = localStorage.getItem('auth_token');
    try {
      const { status } = await post(
        `/order/consumer/message/send/${orderId}`,
        { message: newMessage.trim() },
        { token }
      );
      if (status === 'success') {
        setNewMessage('');
        fetchMessages();
      } else {
        alert('Failed to send message');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setSending(false);
    }
  }

  return (
    <MobileLayout>
      <PageHeader title={`Order #${orderId}`} />
      <ScreenContainer className="flex-1 flex flex-col">
        {/* Loading / Empty State */}
        {loading ? (
          <div className="flex-1 flex items-center justify-center">
            <Spinner size={48} className="text-primary" />
          </div>
        ) : messages.length === 0 ? (
          <EmptyState
            icon="💬"
            title="No messages yet"
            description="Start a conversation with the vendor about your order."
            className="flex-1"
          />
        ) : (
          /* Messages List */
          <div className="flex-1 overflow-y-auto space-y-3">
            {messages.map(msg => {
              const isMine = msg.sender_phone === userPhone;
              return (
                <div
                  key={msg.id}
                  className={`flex ${isMine ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[75%] p-3 rounded-lg ${
                      isMine
                        ? 'bg-primary text-white'
                        : 'bg-background-soft text-text-primary'
                    }`}
                  >
                    <p className="text-sm">{msg.message}</p>
                    <p className="text-xs text-secondary mt-1 text-right">
                      {new Date(msg.timestamp).toLocaleTimeString('en-IN', {
                        hour: '2-digit',
                        minute: '2-digit',
                      })}
                    </p>
                  </div>
                </div>
              );
            })}
          </div>
        )}

        {/* Input Area */}
        <form
          onSubmit={e => {
            e.preventDefault();
            sendMessage();
          }}
          className="flex gap-2 pt-2 border-t border-[var(--divider)]"
        >
          <Input
            placeholder="Type your message…"
            value={newMessage}
            onChange={e => setNewMessage(e.target.value)}
            className="flex-1"
            rows={1}
          />
          <Button type="submit" disabled={sending || !newMessage.trim()}>
            {sending ? <Spinner size={20} className="text-white" /> : 'Send'}
          </Button>
        </form>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Otp.jsx =====

// File: src/pages/Otp.jsx
import React, { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import Button from '../components/atoms/Button';
import Input from '../components/atoms/Input';

export default function Otp() {
  const [otp, setOtp] = useState('');
  const [verifying, setVerifying] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const phone = location.state?.phone || '9876543210';

  async function verifyOtp() {
    if (!/^\d{6}$/.test(otp)) {
      alert('Enter a valid 6-digit OTP');
      return;
    }
    setVerifying(true);
    try {
      const res = await fetch(`${backendUrl}/verify-otp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: '+91' + phone, otp }),
      });
      const data = await res.json();
      if (data.status === 'success' && data.auth_token) {
        localStorage.setItem('auth_token', data.auth_token);
        if (data.basic_onboarding_done) {
          navigate('/home');
        } else {
          navigate('/onboarding/basic');
        }
      } else {
        alert('❌ ' + (data.message || 'Incorrect OTP'));
      }
    } catch {
      alert('Something went wrong while verifying OTP');
    }
    setVerifying(false);
  }

  // Optionally implement resend
  function resendOtp(e) {
    e.preventDefault();
    alert('Resend OTP functionality to be implemented.');
  }

  return (
    <MobileLayout>
      <ScreenContainer className="flex flex-col justify-center min-h-screen">
        <div className="flex flex-col items-center mb-8 mt-8">
          <div className="bg-gradient-to-r from-primary to-primary-dark w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg mb-4">
            <span className="text-white text-2xl">🔐</span>
          </div>
          <h2 className="text-xl font-bold mb-1">Enter OTP</h2>
          <div className="text-secondary text-sm mb-4">Sent to +91 {phone}</div>
        </div>

        <form
          className="flex flex-col gap-5"
          onSubmit={e => { e.preventDefault(); verifyOtp(); }}
        >
          <Input
            autoFocus
            type="tel"
            maxLength={6}
            pattern="\d{6}"
            placeholder="Enter 6-digit code"
            className="text-center tracking-widest text-xl"
            value={otp}
            onChange={e => setOtp(e.target.value.replace(/\D/g, ''))}
          />

          <Button
            type="submit"
            size="lg"
            className="w-full"
            disabled={verifying || otp.length !== 6}
            loading={verifying}
          >
            Verify OTP
          </Button>
        </form>

        <div className="mt-8 text-center text-xs text-secondary">
          Didn’t receive the code?{' '}
          <button
            type="button"
            className="text-primary font-medium underline"
            onClick={resendOtp}
            tabIndex={-1}
          >
            Resend
          </button>
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Profile.jsx =====

// File: src/pages/Profile.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get, post } from '../utils/api';

export default function Profile() {
  const navigate = useNavigate();
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [editing, setEditing] = useState(false);
  const [editData, setEditData] = useState({});

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchProfile();
  }, [navigate]);

  async function fetchProfile() {
    try {
      const { status, data } = await get('/profile/me', { token: localStorage.getItem('auth_token') });
      if (status === 'success') {
        setProfile(data);
        setEditData(data);
      }
    } catch {
      alert('Failed to load profile');
    } finally {
      setLoading(false);
    }
  }

  function startEdit() {
    setEditing(true);
    setEditData({ ...profile });
  }

  function cancelEdit() {
    setEditing(false);
    setEditData({ ...profile });
  }

  async function saveEdit() {
    try {
      const { status, message } = await post('/profile/edit', editData, { token: localStorage.getItem('auth_token') });
      if (status === 'success') {
        setProfile(editData);
        setEditing(false);
        alert('Profile updated');
      } else {
        alert(message || 'Failed to update profile');
      }
    } catch {
      alert('Something went wrong');
    }
  }

  async function logout() {
    if (!window.confirm('Logout?')) return;
    try {
      await post('/logout', {}, { token: localStorage.getItem('auth_token') });
    } catch {}
    localStorage.removeItem('auth_token');
    navigate('/login');
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="My Profile" />
        <ScreenContainer className="flex justify-center py-20">
          <Spinner size={48} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (!profile) {
    return (
      <MobileLayout>
        <PageHeader title="My Profile" />
        <ScreenContainer className="py-20">
          <EmptyState
            icon="👤"
            title="Profile not found"
            description="Unable to load your profile."
            action={{ label: 'Go to Login', onClick: () => navigate('/login') }}
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="My Profile" />
      <ScreenContainer className="space-y-6">
        {!editing && (
          <Button onClick={startEdit} className="w-fit ml-auto">
            Edit
          </Button>
        )}

        {/* Profile Header */}
        <div className="bg-background-soft p-6 rounded-lg text-center space-y-2">
          <div
            className="w-20 h-20 rounded-full bg-gradient-to-r from-primary to-primary-dark mx-auto flex items-center justify-center text-white text-4xl"
            style={{
              backgroundImage: profile.profile_image_url
                ? `url(${profile.profile_image_url})`
                : undefined,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
            }}
          >
            {!profile.profile_image_url && '👤'}
          </div>
          <div className="space-y-1">
            {editing ? (
              <Input
                value={editData.name || ''}
                onChange={e => setEditData({ ...editData, name: e.target.value })}
                placeholder="Full Name"
                className="mx-auto w-full max-w-xs"
              />
            ) : (
              <h2 className="text-xl font-semibold">{profile.name || 'User'}</h2>
            )}
            <p className="text-sm text-secondary">{profile.phone}</p>
            <p className="text-xs text-secondary">
              📍 {profile.flat_number}, {profile.society}, {profile.city}
            </p>
          </div>
        </div>

        {/* Details */}
        <div className="bg-background-soft p-6 rounded-lg space-y-4">
          {/* Gender */}
          <div>
            <p className="text-sm text-secondary mb-1">Gender</p>
            {editing ? (
              <select
                value={editData.gender || ''}
                onChange={e => setEditData({ ...editData, gender: e.target.value })}
                className="w-full p-2 border border-divider rounded"
              >
                <option value="">Select</option>
                {['Male','Female','Other'].map(g => (
                  <option key={g} value={g}>{g}</option>
                ))}
              </select>
            ) : (
              <p className="font-medium">{profile.gender || 'Not provided'}</p>
            )}
          </div>

          {/* Date of Birth */}
          <div>
            <p className="text-sm text-secondary mb-1">Date of Birth</p>
            {editing ? (
              <Input
                type="date"
                value={editData.date_of_birth || ''}
                onChange={e => setEditData({ ...editData, date_of_birth: e.target.value })}
                className="w-full"
              />
            ) : (
              <p className="font-medium">{profile.date_of_birth || 'Not provided'}</p>
            )}
          </div>

          {/* Flat Number */}
          <div>
            <p className="text-sm text-secondary mb-1">Flat / House No.</p>
            {editing ? (
              <Input
                value={editData.flat_number || ''}
                onChange={e => setEditData({ ...editData, flat_number: e.target.value })}
                placeholder="e.g. A-302"
                className="w-full"
              />
            ) : (
              <p className="font-medium">{profile.flat_number || 'Not provided'}</p>
            )}
          </div>

          {/* Save / Cancel */}
          {editing && (
            <div className="flex gap-2">
              <Button onClick={cancelEdit} className="flex-1 btn-secondary">
                Cancel
              </Button>
              <Button onClick={saveEdit} className="flex-1" disabled={!editData.name || !editData.flat_number}>
                Save
              </Button>
            </div>
          )}
        </div>

        {/* Logout */}
        {!editing && (
          <Button onClick={logout} className="btn-secondary">
            Logout
          </Button>
        )}
      </ScreenContainer>
    </MobileLayout>
);
}


===== FILE: src/pages/RateOrder.jsx =====

// File: src/pages/RateOrder.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import EmptyState from '../components/organisms/EmptyState';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import clsx from 'clsx';
import { get } from '../utils/api';

export default function RateOrder() {
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [rating, setRating] = useState(0);
  const [review, setReview] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchOrder(token);
  }, [orderId, navigate]);

  async function fetchOrder(token) {
    try {
      const { status, orders } = await get('/order/history', { token });
      if (status === 'success') {
        const o = orders.find(o => o.order_id === +orderId);
        if (o) {
          setOrder(o);
        } else {
          navigate('/orders');
        }
      }
    } catch {
      // ignore
    } finally {
      setLoading(false);
    }
  }

  function getRatingText(r) {
    return ['','Poor','Fair','Good','Very Good','Excellent'][r] || '';
  }

  async function submitRating() {
    if (rating === 0) return;
    setSubmitting(true);
    const token = localStorage.getItem('auth_token');
    try {
      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/order/rate/${orderId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': token
        },
        body: JSON.stringify({ rating, review: review.trim() })
      });
      const data = await res.json();
      if (data.status === 'success') {
        navigate(`/order/${orderId}`);
      } else {
        alert(data.message || 'Failed to submit rating');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setSubmitting(false);
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="Rate Your Order" />
        <ScreenContainer className="flex items-center justify-center">
          <Spinner size={40} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (!order) {
    return (
      <MobileLayout>
        <PageHeader title="Rate Your Order" />
        <ScreenContainer>
          <EmptyState
            icon="📦"
            title="Order not found"
            description="The order you're trying to rate doesn't exist."
            actionLabel="Back to Orders"
            onAction={() => navigate('/orders')}
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="Rate Your Order" />
      <ScreenContainer className="space-y-6">
        {/* Prompt */}
        <div className="bg-primary rounded-lg p-6 text-center text-white">
          <div className="text-4xl mb-2">⭐</div>
          <p className="text-lg font-semibold mb-1">How was your experience?</p>
          <p className="text-sm opacity-90">Your feedback helps us improve our service.</p>
        </div>

        {/* Order Summary */}
        <div className="bg-background-soft border border-divider rounded-lg p-4 flex items-center gap-4">
          <div className="bg-primary rounded-full w-10 h-10 flex items-center justify-center text-white text-xl">
            🏪
          </div>
          <div>
            <p className="font-medium">Order #{order.order_id}</p>
            <p className="text-sm text-secondary">
              {order.items.length} items • ₹{order.final_amount || order.total_amount}
            </p>
          </div>
        </div>

        {/* Star Rating */}
        <div className="text-center">
          <div className="flex justify-center gap-2 mb-2">
            {[1,2,3,4,5].map(star => (
              <button
                key={star}
                onClick={() => setRating(star)}
                className="text-3xl focus:outline-none"
              >
                <span className={clsx(
                  star <= rating ? 'text-yellow-400' : 'text-gray-300'
                )}>
                  ⭐
                </span>
              </button>
            ))}
          </div>
          {rating > 0 && (
            <p className="text-primary font-medium">{getRatingText(rating)}</p>
          )}
        </div>

        {/* Review Textarea */}
        <div>
          <label className="block mb-1 font-medium">Share your feedback (optional)</label>
          <textarea
            rows={4}
            value={review}
            onChange={e => setReview(e.target.value)}
            className="w-full p-3 border border-divider rounded-lg resize-y focus:outline-none"
            placeholder="Tell us about your experience..."
          />
          <p className="text-xs text-secondary text-right">
            {review.length}/500
          </p>
        </div>

        {/* Actions */}
        <div className="space-y-2">
          <Button
            onClick={submitRating}
            disabled={rating === 0 || submitting}
            className="btn-full"
          >
            {submitting ? 'Submitting...' : 'Submit Rating'}
          </Button>
          <button
            onClick={() => navigate(`/order/${orderId}`)}
            className="w-full text-center text-secondary text-sm"
          >
            Skip for now
          </button>
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/ReturnOrder.jsx =====

// File: src/pages/ReturnOrder.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get, post } from '../utils/api';

export default function ReturnOrder() {
  const { orderId } = useParams();
  const navigate = useNavigate();

  const [order, setOrder] = useState(null);
  const [selectedItems, setSelectedItems] = useState({});
  const [reason, setReason] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      navigate('/login');
      return;
    }
    fetchOrder();
  }, [orderId, navigate]);

  async function fetchOrder() {
    try {
      const { status, orders } = await get('/order/history', {
        token: localStorage.getItem('auth_token')
      });
      if (status === 'success') {
        const found = orders.find(o => o.order_id === Number(orderId));
        setOrder(found || null);
      }
    } catch {
      // ignore
    } finally {
      setLoading(false);
    }
  }

  function toggleItem(itemId) {
    setSelectedItems(prev => {
      const next = { ...prev };
      if (next[itemId]) {
        delete next[itemId];
      } else {
        next[itemId] = 1;
      }
      return next;
    });
  }

  function changeQuantity(itemId, qty) {
    setSelectedItems(prev => ({
      ...prev,
      [itemId]: Math.max(1, Math.min(qty, order.items.find(i => i.item_id === itemId).quantity))
    }));
  }

  async function submitReturn() {
    if (Object.keys(selectedItems).length === 0) {
      alert('Please select at least one item to return.');
      return;
    }
    if (!reason.trim()) {
      alert('Please provide a reason for return.');
      return;
    }
    setSubmitting(true);
    try {
      const items = Object.entries(selectedItems).map(([item_id, quantity]) => ({
        item_id: Number(item_id),
        quantity
      }));
      const { status, message } = await post(`/order/return/raise/${orderId}`, {
        token: localStorage.getItem('auth_token'),
        body: { items, reason: reason.trim() }
      });
      if (status === 'success') {
        alert('Return request sent successfully.');
        navigate(`/order/${orderId}`);
      } else {
        alert(message || 'Failed to send return request.');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setSubmitting(false);
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="Return Order" />
        <ScreenContainer className="flex justify-center items-center h-full">
          <Spinner size={48} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (!order) {
    return (
      <MobileLayout>
        <PageHeader title="Return Order" />
        <ScreenContainer className="pt-10">
          <EmptyState
            icon="⚠️"
            title="Order not found"
            description="We couldn't find that order."
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  if (order.status !== 'delivered') {
    return (
      <MobileLayout>
        <PageHeader title="Return Order" />
        <ScreenContainer className="pt-10">
          <EmptyState
            icon="🚫"
            title="Cannot return this order"
            description="Only delivered orders can be returned."
          />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="Return Order" />
      <ScreenContainer className="space-y-6">
        {/* Order Items */}
        <div className="space-y-4">
          <h4 className="font-semibold">Select items to return</h4>
          {order.items.map(item => (
            <div key={item.item_id} className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={!!selectedItems[item.item_id]}
                onChange={() => toggleItem(item.item_id)}
                className="form-checkbox"
              />
              <div className="flex-1">
                <p className="font-medium">{item.name}</p>
                <p className="text-sm text-secondary">
                  Qty: {item.quantity} &middot; ₹{item.unit_price.toFixed(2)} each
                </p>
              </div>
              {selectedItems[item.item_id] && (
                <Input
                  type="number"
                  min={1}
                  max={item.quantity}
                  value={selectedItems[item.item_id]}
                  onChange={e => changeQuantity(item.item_id, Number(e.target.value))}
                  className="w-16"
                />
              )}
            </div>
          ))}
        </div>

        {/* Reason */}
        <div className="space-y-2">
          <h4 className="font-semibold">Reason for return</h4>
          <textarea
            placeholder="Enter your reason..."
            value={reason}
            onChange={e => setReason(e.target.value)}
            className="w-full bg-background-soft border border-divider rounded p-2 h-24 resize-none"
          />
        </div>

        {/* Submit */}
        <Button
          onClick={submitReturn}
          disabled={submitting}
          className="w-full"
        >
          {submitting ? 'Submitting...' : 'Send Return Request'}
        </Button>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/SearchShops.jsx =====

// File: src/pages/SearchShops.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Input from '../components/atoms/Input';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get } from '../utils/api';

export default function SearchShops() {
  const navigate = useNavigate();
  const [query, setQuery] = useState('');
  const [shops, setShops] = useState([]);
  const [loading, setLoading] = useState(false);
  const [recent, setRecent] = useState([]);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    const saved = JSON.parse(localStorage.getItem('recentSearches') || '[]');
    setRecent(saved);
  }, [navigate]);

  async function search(q) {
    if (!q.trim()) return;
    setLoading(true);
    try {
      const token = localStorage.getItem('auth_token');
      const { status, shops } = await get(`/shops/search?q=${encodeURIComponent(q)}`, { token });
      if (status === 'success') {
        setShops(shops);
        const updated = [q, ...recent.filter(r => r !== q)].slice(0, 5);
        setRecent(updated);
        localStorage.setItem('recentSearches', JSON.stringify(updated));
      } else {
        alert('Failed to search shops');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  function onSubmit(e) {
    e.preventDefault();
    search(query);
  }

  function onRecentClick(q) {
    setQuery(q);
    search(q);
  }

  function clearRecent() {
    setRecent([]);
    localStorage.removeItem('recentSearches');
  }

  return (
    <MobileLayout>
      <PageHeader title="Search Shops" />
      <ScreenContainer className="space-y-6">
        {/* Search Bar */}
        <form onSubmit={onSubmit} className="flex gap-2">
          <Input
            placeholder="Search for shops, items…"
            value={query}
            onChange={e => setQuery(e.target.value)}
            className="flex-1"
          />
          <Button type="submit" disabled={!query.trim()}>Search</Button>
        </form>

        {/* Quick Filters */}
        <div className="flex gap-2 overflow-x-auto">
          {['Grocery','Pharmacy','Restaurant','Electronics','Fashion','Services'].map(cat => (
            <Button key={cat} onClick={() => onRecentClick(cat)} className="whitespace-nowrap">
              {cat}
            </Button>
          ))}
        </div>

        {/* Recent Searches */}
        {recent.length > 0 && !query.trim() && shops.length === 0 && (
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <h4 className="font-semibold">Recent Searches</h4>
              <button onClick={clearRecent} className="text-sm text-primary">Clear</button>
            </div>
            <div className="space-y-1">
              {recent.map((r, i) => (
                <button
                  key={i}
                  onClick={() => onRecentClick(r)}
                  className="w-full text-left p-2 bg-background-soft rounded"
                >
                  🕒 {r}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Loading */}
        {loading && (
          <div className="flex justify-center py-10">
            <Spinner size={48} className="text-primary" />
          </div>
        )}

        {/* Results */}
        {!loading && shops.length > 0 && (
          <div className="space-y-4">
            <h4 className="font-semibold">Results ({shops.length})</h4>
            <div className="space-y-2">
              {shops.map(shop => (
                <div
                  key={shop.id}
                  onClick={() => navigate(`/shop/${shop.id}`)}
                  className="flex items-center gap-3 p-4 bg-background-soft rounded cursor-pointer"
                >
                  <div className="w-12 h-12 bg-gradient-to-r from-primary to-primary-dark rounded-full flex items-center justify-center text-white text-lg">
                    🏪
                  </div>
                  <div className="flex-1">
                    <p className="font-medium">{shop.shop_name}</p>
                    <p className="text-sm text-secondary">
                      {shop.shop_type} • {shop.description}
                    </p>
                    <p className="text-xs">
                      <span className={shop.is_open ? 'text-success' : 'text-error'}>
                        {shop.is_open ? 'Open' : 'Closed'}
                      </span>
                      {shop.delivers && <span className="ml-2 text-primary">Delivers</span>}
                    </p>
                  </div>
                  <div className="text-secondary text-lg">→</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Empty State */}
        {!loading && query.trim() && shops.length === 0 && (
          <EmptyState
            icon="🔍"
            title="No shops found"
            description="Try searching with different keywords."
          />
        )}
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/ShopDetail.jsx =====

// File: src/pages/ShopDetails.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import Button from '../components/atoms/Button';
import PageHeader from '../components/molecules/PageHeader';

export default function ShopDetails() {
  const { shopId } = useParams();
  const navigate = useNavigate();
  const [shop, setShop] = useState(null);
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [cartCount, setCartCount] = useState(0);

  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const token = localStorage.getItem('auth_token');

  useEffect(() => {
    if (!token) {
      navigate('/login');
      return;
    }
    fetchShopItems();
    fetchCartCount();
    // eslint-disable-next-line
  }, [shopId]);

  async function fetchShopItems() {
    try {
      const res = await fetch(`${backendUrl}/items/shop/${shopId}`, {
        headers: { Authorization: token },
      });
      const data = await res.json();
      if (data.status === 'success') {
        setShop(data.shop);
        setItems(data.items);
      } else {
        alert('Failed to load shop items');
      }
    } catch (error) {
      alert('Something went wrong. Please try again.');
    }
    setLoading(false);
  }

  async function fetchCartCount() {
    try {
      const res = await fetch(`${backendUrl}/cart/view`, {
        headers: { Authorization: token },
      });
      const data = await res.json();
      if (data.status === 'success') {
        setCartCount(data.cart.length);
      }
    } catch {}
  }

  async function addToCart(itemId) {
    try {
      const res = await fetch(`${backendUrl}/cart/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: token,
        },
        body: JSON.stringify({ item_id: itemId, quantity: 1 }),
      });
      const data = await res.json();
      if (data.status === 'success') {
        fetchCartCount();
      } else {
        alert(data.message || 'Failed to add item to cart');
      }
    } catch {
      alert('Something went wrong. Please try again.');
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <ScreenContainer>
          <div className="flex flex-col items-center justify-center h-64">
            <div className="animate-spin border-4 border-divider border-t-primary rounded-full w-10 h-10 mb-6" />
            <p className="text-base text-secondary">Loading shop details…</p>
          </div>
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <ScreenContainer>
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <PageHeader title={shop?.shop_name || 'Shop'} />
          {cartCount > 0 && (
            <button
              onClick={() => navigate('/cart')}
              className="relative bg-primary-gradient rounded-full w-10 h-10 flex items-center justify-center text-white text-xl shadow"
            >
              🛒
              <span className="absolute -top-2 -right-2 bg-error text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold">
                {cartCount}
              </span>
            </button>
          )}
        </div>

        {/* Shop Info */}
        <div className="bg-background-soft border border-divider rounded-xl p-5 mb-6 flex items-center gap-4">
          <div className="w-16 h-16 bg-primary-gradient rounded-full flex items-center justify-center text-2xl text-white">
            🏪
          </div>
          <div className="flex-1">
            <h3 className="font-bold text-lg mb-0.5">{shop?.shop_name}</h3>
            <p className="text-secondary text-sm mb-1">
              {shop?.shop_type} • {shop?.description || 'Quality products & services'}
            </p>
            <div className="flex gap-4 text-xs font-medium">
              <span className="text-success">• Open</span>
              <span className="text-primary">• Delivers</span>
            </div>
          </div>
        </div>

        {/* Items Section */}
        <h3 className="text-lg font-bold mb-3">
          Available Items ({items.length})
        </h3>
        {items.length === 0 ? (
          <div className="text-center py-20 text-secondary text-base">
            No items available at this shop
          </div>
        ) : (
          <div className="flex flex-col gap-4">
            {items.map((item) => (
              <div
                key={item.id}
                className="bg-background-soft border border-divider rounded-lg p-4 flex items-center gap-3"
              >
                <div
                  className="w-15 h-15 rounded-lg flex items-center justify-center text-2xl"
                  style={{
                    background: item.image_url
                      ? `url(${item.image_url}) center/cover no-repeat`
                      : 'var(--divider)',
                  }}
                >
                  {!item.image_url && '📦'}
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-base mb-1">{item.title}</h4>
                  <p className="text-secondary text-xs mb-1">
                    {item.brand && `${item.brand} • `}
                    {item.pack_size} {item.unit}
                  </p>
                  <div className="flex items-center gap-2">
                    <span className="font-bold text-primary text-base">
                      ₹{item.price}
                    </span>
                    {item.mrp && item.mrp > item.price && (
                      <>
                        <span className="text-secondary text-sm line-through">
                          ₹{item.mrp}
                        </span>
                        <span className="text-success text-xs font-bold">
                          {Math.round(((item.mrp - item.price) / item.mrp) * 100)}% OFF
                        </span>
                      </>
                    )}
                  </div>
                </div>
                <Button
                  size="sm"
                  onClick={() => addToCart(item.id)}
                  className="min-w-[64px]"
                >
                  Add
                </Button>
              </div>
            ))}
          </div>
        )}
        {/* Bottom navigation spacing */}
        <div className="h-20" />
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/ShopList.jsx =====

// File: src/pages/ShopList.jsx
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import ShopListSection from '../components/organisms/ShopListSection';
import NearbyShopCard from '../components/molecules/NearbyShopCard';
import EmptyState from '../components/organisms/EmptyState';
import { Spinner } from '../components/atoms/Loader';
import { get } from '../utils/api';

export default function ShopList() {
  const location = useLocation();
  const navigate = useNavigate();
  const [shops, setShops] = useState([]);
  const [loading, setLoading] = useState(true);

  const filterType = new URLSearchParams(location.search).get('type');

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      navigate('/login');
      return;
    }
    fetchShops(token);
  }, [filterType]);

  async function fetchShops(token) {
    setLoading(true);
    try {
      const url = filterType
        ? `/shops?type=${filterType}`
        : '/shops';
      const { status, shops: data } = await get(url, { token });
      setShops(status === 'success' ? data : []);
    } catch {
      setShops([]);
    } finally {
      setLoading(false);
    }
  }

  const title = filterType
    ? `${filterType.charAt(0).toUpperCase() + filterType.slice(1)} Shops`
    : 'All Shops';

  return (
    <MobileLayout>
      <PageHeader back={() => navigate(-1)} title={title} />
      <ScreenContainer>
        {loading ? (
          <div className="flex flex-col items-center justify-center py-12">
            <Spinner size={40} className="text-primary mb-4" />
            <p className="text-sm text-text-secondary">Loading shops...</p>
          </div>
        ) : shops.length === 0 ? (
          <EmptyState
            icon={<Spinner size={48} />}
            title="No Shops Found"
            description="Try a different category or check back later."
            actionLabel="View All"
            onAction={() => navigate('/shops')}
          />
        ) : (
          <ShopListSection layout="vertical" empty={null}>
            {shops.map(shop => (
              <NearbyShopCard
                key={shop.id}
                image={shop.logo_url}
                name={shop.shop_name}
                category={shop.shop_type}
                address={shop.description}
                status={shop.is_open ? 'open' : 'closed'}
                delivers={shop.delivers}
                onClick={() => navigate(`/shop/${shop.id}`)}
              />
            ))}
          </ShopListSection>
        )}
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Support.jsx =====

// File: src/pages/Support.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Button from '../components/atoms/Button';

export default function Support() {
  const navigate = useNavigate();

  const supportOptions = [
    {
      icon: '💬',
      title: 'Chat with Us',
      description: 'Get instant help from our support team',
      action: () => alert('Chat support will be available soon!'),
    },
    {
      icon: '📞',
      title: 'Call Support',
      description: 'Speak directly with our customer care',
      action: () => (window.location.href = 'tel:+918800000000'),
    },
    {
      icon: '📧',
      title: 'Email Us',
      description: 'Send us your queries via email',
      action: () => (window.location.href = 'mailto:support@habrio.com'),
    },
    {
      icon: '❓',
      title: 'FAQ',
      description: 'Find answers to common questions',
      action: () => navigate('/faq'),
    },
  ];

  const commonIssues = [
    {
      icon: '💳',
      title: 'Payment Issues',
      description: 'Problems with wallet, refunds, or payments',
    },
    {
      icon: '📦',
      title: 'Order Problems',
      description: 'Order not received, wrong items, delays',
    },
    {
      icon: '🏪',
      title: 'Shop Issues',
      description: 'Shop not available, item out of stock',
    },
    {
      icon: '👤',
      title: 'Account Help',
      description: 'Profile, login, or account related issues',
    },
  ];

  return (
    <MobileLayout>
      <ScreenContainer>
        {/* Header */}
        <PageHeader title="Help & Support" />

        {/* Support Header */}
        <div className="bg-primary-gradient rounded-2xl p-7 mb-6 text-center text-white relative overflow-hidden">
          <div className="text-5xl mb-4">🤝</div>
          <h3 className="text-xl font-semibold mb-2">We're Here to Help</h3>
          <p className="text-sm opacity-90">Get support 24/7 for all your queries and issues</p>
        </div>

        {/* Contact Options */}
        <div className="mb-6">
          <h3 className="text-lg font-bold mb-4">Contact Us</h3>
          <div className="flex flex-col gap-3">
            {supportOptions.map((option, i) => (
              <button
                key={i}
                onClick={option.action}
                className="bg-background-soft border border-divider rounded-xl p-4 flex items-center gap-4 text-left hover:bg-background-hover active:shadow"
              >
                <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center text-xl shadow">
                  {option.icon}
                </div>
                <div className="flex-1">
                  <h4 className="text-base font-semibold mb-1">{option.title}</h4>
                  <p className="text-sm text-secondary">{option.description}</p>
                </div>
                <span className="text-lg text-secondary">→</span>
              </button>
            ))}
          </div>
        </div>

        {/* Common Issues */}
        <div className="mb-6">
          <h3 className="text-lg font-bold mb-4">Common Issues</h3>
          <div className="grid grid-cols-2 gap-3">
            {commonIssues.map((issue, i) => (
              <div
                key={i}
                className="bg-background-soft border border-divider rounded-xl p-4 text-center"
              >
                <div className="text-3xl mb-3">{issue.icon}</div>
                <h4 className="text-sm font-semibold mb-1">{issue.title}</h4>
                <p className="text-xs text-secondary leading-snug">{issue.description}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Emergency Contact */}
        <div className="bg-error/10 border border-error/20 rounded-xl p-4 mb-6">
          <div className="flex items-center gap-3 mb-2">
            <span className="text-lg">🚨</span>
            <h4 className="text-base font-semibold text-error m-0">Emergency Contact</h4>
          </div>
          <p className="ml-7 text-sm text-secondary mb-3">
            For urgent issues like safety concerns or emergency situations
          </p>
          <Button
            size="sm"
            onClick={() => (window.location.href = 'tel:+911234567890')}
            className="bg-error text-white ml-7"
          >
            📞 Call Emergency Line
          </Button>
        </div>

        {/* Operating Hours */}
        <div className="bg-background-soft border border-divider rounded-xl p-5 mb-6">
          <h3 className="text-base font-semibold mb-4">Support Hours</h3>
          <div className="flex flex-col gap-2">
            <div className="flex justify-between text-sm">
              <span>📞 Phone Support</span>
              <span className="text-secondary">9 AM - 9 PM</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>💬 Chat Support</span>
              <span className="text-success font-medium">24/7</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>📧 Email Support</span>
              <span className="text-secondary">24-48 hours</span>
            </div>
          </div>
        </div>

        {/* App Version */}
        <div className="bg-background-soft border border-divider rounded-xl p-4 text-center mb-5">
          <p className="text-xs text-secondary mb-1">Habrio App Version 1.0.0</p>
          <p className="text-xs text-secondary">
            Need technical help? Include this version number when contacting support
          </p>
        </div>

        {/* Bottom Navigation Spacer */}
        <div className="h-20" />
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/TitleScreen.jsx =====

// File: src/pages/TitleScreen.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';

export default function TitleScreen() {
  const navigate = useNavigate();

  return (
    <MobileLayout>
      <ScreenContainer className="flex flex-col items-center justify-center h-full">
        {/* Logo */}
        <div
          className="
            flex items-center justify-center
            mb-6 w-20 h-20
            rounded-2xl shadow-lg
            bg-gradient-to-r from-primary to-primary-dark
          "
        >
          <span className="text-4xl text-onPrimary">🏘️</span>
        </div>

        {/* Title & Subtitle */}
        <h1 className="text-2xl font-bold mb-2 text-text-primary">
          Welcome to Habrio
        </h1>
        <p className="text-sm text-text-secondary mb-8 text-center">
          Your society’s very own super app
        </p>

        {/* Call to Action */}
        <button
          onClick={() => navigate('/login')}
          className="
            w-full py-4 mb-6
            rounded-lg
            bg-primary text-onPrimary font-medium
          "
        >
          Get Started
        </button>

        {/* Footer Note */}
        <p className="text-xs text-text-secondary text-center">
          Built with <span className="text-error">❤️</span> for your neighbourhood
        </p>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/Wallet.jsx =====

// File: src/pages/Wallet.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get } from '../utils/api';

function getTransactionIcon(type) {
  switch (type) {
    case 'credit':
    case 'recharge': return '💰';
    case 'debit': return '💸';
    case 'refund': return '↩️';
    default: return '💳';
  }
}

function getTransactionColor(type) {
  switch (type) {
    case 'credit':
    case 'recharge':
    case 'refund': return 'text-success';
    case 'debit': return 'text-error';
    default: return 'text-secondary';
  }
}

export default function Wallet() {
  const navigate = useNavigate();
  const [balance, setBalance] = useState(0);
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchWallet(token);
    fetchTransactions(token);
  }, [navigate]);

  async function fetchWallet(token) {
    try {
      const { status, balance } = await get('/wallet', { token });
      if (status === 'success') setBalance(balance);
    } catch {
      // fail silent
    }
  }

  async function fetchTransactions(token) {
    try {
      const { status, transactions } = await get('/wallet/history', { token });
      if (status === 'success') setTransactions(transactions.slice(0, 5));
    } catch {
      // fail silent
    } finally {
      setLoading(false);
    }
  }

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="My Wallet" />
        <ScreenContainer className="flex justify-center py-20">
          <Spinner size={48} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="My Wallet" />
      <ScreenContainer className="space-y-6">

        {/* Wallet Balance Card */}
        <div className="relative bg-gradient-to-r from-primary to-primary-dark rounded-xl p-6 text-white overflow-hidden mb-4">
          <div className="absolute -top-16 -right-12 w-44 h-44 bg-white/10 rounded-full"></div>
          <div className="relative z-10">
            <div className="flex items-center gap-3 mb-2">
              <span className="text-2xl">💳</span>
              <span className="opacity-90 font-medium">Wallet Balance</span>
            </div>
            <h1 className="text-3xl font-bold mb-4">₹{balance.toFixed(2)}</h1>
            <div className="flex gap-2">
              <Button onClick={() => navigate('/wallet/add')} size="sm" variant="white">+ Add Money</Button>
              <Button onClick={() => navigate('/wallet/history')} size="sm" variant="outline-white">View History</Button>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div>
          <h3 className="text-lg font-semibold mb-3">Quick Actions</h3>
          <div className="grid grid-cols-2 gap-3">
            <Button
              onClick={() => navigate('/wallet/add')}
              className="flex flex-col items-center gap-2 p-4"
              variant="soft"
            >
              <span className="text-2xl">💰</span>
              <span className="font-semibold text-base">Add Money</span>
              <span className="text-xs text-secondary">Top up your wallet</span>
            </Button>
            <Button
              onClick={() => navigate('/wallet/history')}
              className="flex flex-col items-center gap-2 p-4"
              variant="soft"
            >
              <span className="text-2xl">📊</span>
              <span className="font-semibold text-base">Transaction History</span>
              <span className="text-xs text-secondary">View all transactions</span>
            </Button>
          </div>
        </div>

        {/* Recent Transactions */}
        <div>
          <div className="flex justify-between items-center mb-3">
            <h3 className="text-lg font-semibold">Recent Transactions</h3>
            {transactions.length > 0 && (
              <Button onClick={() => navigate('/wallet/history')} size="sm" variant="link">
                View All
              </Button>
            )}
          </div>
          {transactions.length === 0 ? (
            <EmptyState
              icon="📝"
              title="No transactions yet"
              description="Your transaction history will appear here"
            />
          ) : (
            <div className="flex flex-col gap-2">
              {transactions.map(tx => (
                <div
                  key={tx.id}
                  className="flex items-center gap-3 bg-background-soft border border-divider rounded-lg p-4"
                >
                  <div className="w-10 h-10 flex items-center justify-center rounded-full bg-white text-lg">
                    {getTransactionIcon(tx.type)}
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold text-base capitalize">
                      {tx.type === 'recharge'
                        ? 'Money Added'
                        : tx.type === 'debit'
                        ? 'Payment'
                        : tx.type === 'refund'
                        ? 'Refund'
                        : tx.type}
                    </p>
                    <p className="text-xs text-secondary">{tx.reference || 'Wallet transaction'}</p>
                    <p className="text-xs text-secondary">
                      {new Date(tx.created_at).toLocaleDateString('en-IN', {
                        day: 'numeric',
                        month: 'short',
                        hour: '2-digit',
                        minute: '2-digit',
                      })}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className={`font-bold text-base ${getTransactionColor(tx.type)}`}>
                      {tx.type === 'debit' ? '-' : '+'}₹{tx.amount}
                    </p>
                    <p className="text-xs text-success uppercase font-semibold">{tx.status}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Safety Notice */}
        <div className="bg-error/10 border border-error/20 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <span className="text-base mt-1">🔒</span>
            <div>
              <h4 className="text-sm font-semibold text-primary mb-1">Your money is safe</h4>
              <p className="text-xs text-secondary leading-normal">
                All transactions are secured with bank-grade encryption. Your wallet balance is protected and can be refunded anytime.
              </p>
            </div>
          </div>
        </div>
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/pages/WalletHistory.jsx =====

// File: src/pages/WalletHistory.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import MobileLayout from '../components/layout/MobileLayout';
import ScreenContainer from '../components/layout/ScreenContainer';
import PageHeader from '../components/molecules/PageHeader';
import Button from '../components/atoms/Button';
import { Spinner } from '../components/atoms/Loader';
import EmptyState from '../components/organisms/EmptyState';
import { get } from '../utils/api';

function getTransactionIcon(type) {
  switch (type) {
    case 'credit':
    case 'recharge': return '💰';
    case 'debit': return '💸';
    case 'refund': return '↩️';
    default: return '💳';
  }
}

function getTransactionColor(type) {
  switch (type) {
    case 'credit':
    case 'recharge':
    case 'refund': return 'text-success';
    case 'debit': return 'text-error';
    default: return 'text-secondary';
  }
}

export default function WalletHistory() {
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (!token) return navigate('/login');
    fetchTransactions(token);
  }, [navigate]);

  async function fetchTransactions(token) {
    try {
      const { status, transactions } = await get('/wallet/history', { token });
      if (status === 'success') setTransactions(transactions);
    } catch {
      // fail silent
    } finally {
      setLoading(false);
    }
  }

  const filteredTransactions = transactions.filter(t => {
    if (filter === 'all') return true;
    if (filter === 'credit') return ['credit', 'recharge', 'refund'].includes(t.type);
    if (filter === 'debit') return t.type === 'debit';
    return true;
  });

  // Group by date
  const grouped = filteredTransactions.reduce((acc, tx) => {
    const date = new Date(tx.created_at).toDateString();
    if (!acc[date]) acc[date] = [];
    acc[date].push(tx);
    return acc;
  }, {});

  if (loading) {
    return (
      <MobileLayout>
        <PageHeader title="Transaction History" />
        <ScreenContainer className="flex justify-center py-20">
          <Spinner size={48} className="text-primary" />
        </ScreenContainer>
      </MobileLayout>
    );
  }

  return (
    <MobileLayout>
      <PageHeader title="Transaction History" />
      <ScreenContainer className="space-y-6">
        {/* Filter Tabs */}
        <div className="flex gap-2 pb-2 overflow-x-auto">
          {[
            { key: 'all', label: 'All' },
            { key: 'credit', label: 'Money In' },
            { key: 'debit', label: 'Money Out' }
          ].map(tab => (
            <Button
              key={tab.key}
              onClick={() => setFilter(tab.key)}
              className={`whitespace-nowrap rounded-full ${filter === tab.key ? 'bg-primary text-white' : 'bg-background-soft text-text-primary border border-divider'}`}
              size="sm"
              variant={filter === tab.key ? 'primary' : 'soft'}
            >
              {tab.label}
            </Button>
          ))}
        </div>

        {/* Transactions List */}
        {filteredTransactions.length === 0 ? (
          <EmptyState
            icon="📝"
            title="No transactions found"
            description="Your transaction history will appear here once you start using your wallet"
            actionLabel="Add Money"
            onAction={() => navigate('/wallet/add')}
          />
        ) : (
          <div className="flex flex-col gap-6">
            {Object.entries(grouped).map(([date, txs]) => (
              <div key={date}>
                <h4 className="text-xs font-semibold text-secondary uppercase mb-2 tracking-wide">
                  {new Date(date).toLocaleDateString('en-IN', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric'
                  })}
                </h4>
                <div className="flex flex-col gap-2">
                  {txs.map(tx => (
                    <div
                      key={tx.id}
                      className="flex items-center gap-3 bg-background-soft border border-divider rounded-lg p-4"
                    >
                      <div className="w-12 h-12 flex items-center justify-center bg-white rounded-full text-xl">
                        {getTransactionIcon(tx.type)}
                      </div>
                      <div className="flex-1">
                        <p className="font-semibold capitalize">
                          {tx.type === 'recharge'
                            ? 'Money Added'
                            : tx.type === 'debit'
                            ? 'Payment'
                            : tx.type === 'refund'
                            ? 'Refund Received'
                            : tx.type === 'credit'
                            ? 'Money Credited'
                            : tx.type}
                        </p>
                        <p className="text-xs text-secondary">{tx.reference || 'Wallet transaction'}</p>
                        <p className="text-xs text-secondary">
                          {new Date(tx.created_at).toLocaleTimeString('en-IN', {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className={`font-bold text-base ${getTransactionColor(tx.type)}`}>
                          {tx.type === 'debit' ? '-' : '+'}₹{parseFloat(tx.amount).toFixed(2)}
                        </p>
                        <span className={`text-xs uppercase font-bold px-2 py-1 rounded 
                          ${tx.status === 'success'
                            ? 'bg-success/10 text-success'
                            : 'bg-error/10 text-error'}`}>
                          {tx.status}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )}
      </ScreenContainer>
    </MobileLayout>
  );
}


===== FILE: src/router.jsx =====

// src/router.jsx
import { Routes, Route, Navigate } from "react-router-dom";

// Pages (auto-imported as per your src/pages)
import TitleScreen from "./pages/TitleScreen";
import Login from "./pages/Login";
import Otp from "./pages/Otp";
import Home from "./pages/Home";
import AboutHabrio from "./pages/AboutHabrio";
import AddMoney from "./pages/AddMoney";
import BasicOnboarding from "./pages/BasicOnboarding";
import Cart from "./pages/Cart";
import Checkout from "./pages/Checkout";
import ConsumerOnboarding from "./pages/ConsumerOnboarding";
import OrderDetail from "./pages/OrderDetail";
import OrderHistory from "./pages/OrderHistory";
import OrderMessages from "./pages/OrderMessages";
import Profile from "./pages/Profile";
import RateOrder from "./pages/RateOrder";
import ReturnOrder from "./pages/ReturnOrder";
import SearchShops from "./pages/SearchShops";
import ShopDetail from "./pages/ShopDetail";
import ShopList from "./pages/ShopList";
import Support from "./pages/Support";
import Wallet from "./pages/Wallet";
import WalletHistory from "./pages/WalletHistory";

export default function AppRoutes() {
  return (
    <Routes>
      <Route path="/" element={<TitleScreen />} />
      <Route path="/login" element={<Login />} />
      <Route path="/otp" element={<Otp />} />

      <Route path="/home" element={<Home />} />

      <Route path="/onboarding/consumer" element={<ConsumerOnboarding />} />
      <Route path="/onboarding/basic" element={<BasicOnboarding />} />

      <Route path="/about" element={<AboutHabrio />} />

      <Route path="/search" element={<SearchShops />} />
      <Route path="/shop/:shopId" element={<ShopDetail />} />
      <Route path="/shops" element={<ShopList />} />

      <Route path="/cart" element={<Cart />} />
      <Route path="/checkout" element={<Checkout />} />

      <Route path="/orders" element={<OrderHistory />} />
      <Route path="/order/:orderId" element={<OrderDetail />} />
      <Route path="/order/:orderId/messages" element={<OrderMessages />} />
      <Route path="/order/:orderId/rate" element={<RateOrder />} />
      <Route path="/order/:orderId/return" element={<ReturnOrder />} />

      <Route path="/profile" element={<Profile />} />

      <Route path="/wallet" element={<Wallet />} />
      <Route path="/wallet/history" element={<WalletHistory />} />
      <Route path="/wallet/add" element={<AddMoney />} />

      <Route path="/support" element={<Support />} />

      {/* Fallback */}
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
}


===== FILE: src/styles/index.css =====

@tailwind base;
@tailwind components;
@tailwind utilities;


===== FILE: src/utils/api.js =====

const baseUrl = import.meta.env.VITE_BACKEND_URL;

// Main API request utility with error handling
export async function apiRequest(path, options = {}) {
  const token = localStorage.getItem('auth_token');
  const headers = { 'Content-Type': 'application/json', ...(options.headers || {}) };
  if (token) headers['Authorization'] = token;

  let res;
  try {
    res = await fetch(`${baseUrl}${path}`, { ...options, headers });
  } catch (err) {
    // Network/connection error
    return { status: 'error', message: 'Network error', error: err };
  }

  let data;
  try {
    data = await res.json();
  } catch {
    // Response not JSON
    return { status: 'error', message: 'Invalid server response', code: res.status };
  }

  // Optional: Attach HTTP status
  data.httpStatus = res.status;
  // Attach raw ok/fail
  data.ok = res.ok;

  // Standardize error shape
  if (!res.ok && !data.status) {
    data.status = 'error';
    data.message = data.message || 'Something went wrong';
  }
  return data;
}

// Simple GET/POST wrappers
export const get = (path) => apiRequest(path);

export const post = (path, body) =>
  apiRequest(path, { method: 'POST', body: JSON.stringify(body) });

export const del = (path) =>
  apiRequest(path, { method: 'DELETE' });

